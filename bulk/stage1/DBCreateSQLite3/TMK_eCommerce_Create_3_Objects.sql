/*
Script generated by Aqua Data Studio 9.0.16 on Oct-10-2011 11:48:11 AM
Database: null
Schema: <All Schemas>
*/

CREATE TABLE CodeTableLanguageISO639_2_B  (
	LanguageCode  	char(3) NOT NULL,
	LanguageCode2 	char(2) NULL,
	FlagONIXNative	boolean NOT NULL,
	Name          	varchar(128) NOT NULL,
	Description   	varchar(512) NULL,
	PRIMARY KEY(LanguageCode)
);
COMMENT ON TABLE CodeTableLanguageISO639_2_B IS 'This table stores ONIX list 74 (ISO 639-2/B and the conversion to ISO 639-1).

http://en.wikipedia.org/wiki/List_of_ISO_639-2_codes';

CREATE TABLE CodeTables  (
	CodeTableId       	integer NOT NULL,
	TableDomain       	varchar(128) NOT NULL,
	TableName         	varchar(128) NOT NULL,
	TableDescription  	varchar(512) NULL,
	FlagONIX30        	boolean NOT NULL,
	FlagGrouped       	boolean NOT NULL,
	DataTableName     	varchar(128) NOT NULL,
	DataTableSchema   	varchar(128) NOT NULL,
	DataTableCodeField	varchar(128) NULL,
	DataTableNameField	varchar(128) NULL,
	FlagDeleted       	boolean NOT NULL,
	CreationDate      	timestamp NOT NULL,
	LastUpdateDate    	timestamp NULL,
	DeletionDate      	timestamp NULL,
	PRIMARY KEY(CodeTableId)
);
COMMENT ON TABLE CodeTables IS 'This table is used as a Catalog of every Code Table the system needs. Tables of the same type (ex: Onix 2 digit code tables) can be grouped and stored in the same physical table, other tables can be separately stored. The real store for the table is indicated by fields DataTableName and DataTableSpace.';
COMMENT ON COLUMN CodeTables.TableDomain IS 'The table domain (ex: ONIX)';
COMMENT ON COLUMN CodeTables.TableName IS 'The table name (ex: for ONIX, "44" for List 44).';
COMMENT ON COLUMN CodeTables.FlagONIX30 IS 'If this field is true, then the table is an ONIX table.';
COMMENT ON COLUMN CodeTables.FlagGrouped IS 'If this flag is true, then the target table (DataTableSchema + DataTableName) require the CodeTableId as part of the index because many tables are stored in that target.';

CREATE TABLE CodeTablesONIX30Char1  (
	CodeTableId   	integer NOT NULL,
	CodeValue     	char(1) NOT NULL,
	FlagONIXNative	boolean NOT NULL,
	Name          	varchar(128) NOT NULL,
	Description   	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue)
);
COMMENT ON TABLE CodeTablesONIX30Char1 IS 'This table stores the 1 Char values of ONIX tables. The values can actualy be augmented with non-ONIX codes.';

CREATE TABLE CodeTablesONIX30Char1Language  (
	CodeTableId 	integer NOT NULL,
	CodeValue   	char(1) NOT NULL,
	LanguageCode	char(2) NOT NULL,
	Name        	varchar(128) NOT NULL,
	Description 	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue,LanguageCode)
);
COMMENT ON TABLE CodeTablesONIX30Char1Language IS 'This table stores language translations for the ONIX codes.';

CREATE TABLE CodeTablesONIX30Char2  (
	CodeTableId   	integer NOT NULL,
	CodeValue     	char(2) NOT NULL,
	FlagONIXNative	boolean NOT NULL,
	Name          	varchar(128) NOT NULL,
	Description   	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue)
);
COMMENT ON TABLE CodeTablesONIX30Char2 IS 'This table stores the 2 Char values of ONIX tables. The values can actualy be augmented with non-ONIX codes.';

CREATE TABLE CodeTablesONIX30Char2Language  (
	CodeTableId 	integer NOT NULL,
	CodeValue   	char(2) NOT NULL,
	LanguageCode	char(2) NOT NULL,
	Name        	varchar(128) NOT NULL,
	Description 	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue,LanguageCode)
);
COMMENT ON TABLE CodeTablesONIX30Char2Language IS 'This table stores language translations for the ONIX codes.';

CREATE TABLE CodeTablesONIX30Char3  (
	CodeTableId   	integer NOT NULL,
	CodeValue     	char(3) NOT NULL,
	FlagONIXNative	boolean NOT NULL,
	Name          	varchar(128) NOT NULL,
	Description   	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue)
);
COMMENT ON TABLE CodeTablesONIX30Char3 IS 'This table stores the 3 Char values of ONIX tables. The values can actualy be augmented with non-ONIX codes.';

CREATE TABLE CodeTablesONIX30Char3Language  (
	CodeTableId 	integer NOT NULL,
	CodeValue   	char(3) NOT NULL,
	LanguageCode	char(2) NOT NULL,
	Name        	varchar(128) NOT NULL,
	Description 	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue,LanguageCode)
);
COMMENT ON TABLE CodeTablesONIX30Char3Language IS 'This table stores language translations for the ONIX codes.';

CREATE TABLE CodeTablesONIX30Char4  (
	CodeTableId   	integer NOT NULL,
	CodeValue     	char(4) NOT NULL,
	FlagONIXNative	boolean NOT NULL,
	Name          	varchar(128) NOT NULL,
	Description   	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue)
);
COMMENT ON TABLE CodeTablesONIX30Char4 IS 'This table stores the 4 Char values of ONIX tables. The values can actualy be augmented with non-ONIX codes.';

CREATE TABLE CodeTablesONIX30Char4Language  (
	CodeTableId 	integer NOT NULL,
	CodeValue   	char(4) NOT NULL,
	LanguageCode	char(2) NOT NULL,
	Name        	varchar(128) NOT NULL,
	Description 	varchar(1024) NULL,
	PRIMARY KEY(CodeTableId,CodeValue,LanguageCode)
);
COMMENT ON TABLE CodeTablesONIX30Char4Language IS 'This table stores language translations for the ONIX codes.';

CREATE TABLE CodeTablesRegion  (
	CodeValue     	varchar(16) NOT NULL,
	FlagONIXNative	boolean NOT NULL,
	Name          	varchar(128) NOT NULL,
	Description   	varchar(1024) NULL,
	PRIMARY KEY(CodeValue)
);
COMMENT ON TABLE CodeTablesRegion IS 'This table stores the Region Codes (table 49). The values can actualy be augmented with non-ONIX codes.';

CREATE TABLE CodeTablesRegionLanguage  (
	CodeValue   	varchar(16) NOT NULL,
	LanguageCode	char(2) NOT NULL,
	Name        	varchar(128) NOT NULL,
	Description 	varchar(1024) NULL,
	PRIMARY KEY(CodeValue,LanguageCode)
);
COMMENT ON TABLE CodeTablesRegionLanguage IS 'This table stores language translations for the ONIX codes.';

CREATE TABLE CollectionIdentifiers  (
	IdentifierTypeId	integer NOT NULL,
	IDValue         	varchar(256) NOT NULL,
	CollectionId    	integer NOT NULL,
	FlagPrimary     	boolean NOT NULL,
	PRIMARY KEY(IdentifierTypeId,IDValue)
);
COMMENT ON TABLE CollectionIdentifiers IS 'This table describes the Ids for Collection entities. It is self-populated by fields P.5.3 to P.5.5 as a result of ONIX 3.0 file processing.';
COMMENT ON COLUMN CollectionIdentifiers.IdentifierTypeId IS 'According to Identifiers Table Pattern on ONIX 3.0 List 13.';

CREATE TABLE CollectionTitleElements  (
	CollectionId      	integer NOT NULL,
	TitleType         	char(2) NOT NULL,
	EntryOrder        	integer NOT NULL,
	LanguageCode      	char(2) NOT NULL,
	TitleElementLevel 	char(2) NOT NULL,
	PartNumber        	varchar(64) NULL,
	YearOfAnnual      	varchar(64) NULL,
	TitleText         	varchar(512) NULL,
	TitlePrefix       	varchar(64) NULL,
	TitleWithoutPrefix	varchar(512) NULL,
	Subtitle          	varchar(512) NULL,
	PRIMARY KEY(CollectionId,TitleType,EntryOrder)
);
COMMENT ON TABLE CollectionTitleElements IS 'This table describes titles for the Collection entities. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX tags P.5.7 to P.5.13.';
COMMENT ON COLUMN CollectionTitleElements.EntryOrder IS 'Sequential number assigned to each element informed by Onix.';
COMMENT ON COLUMN CollectionTitleElements.TitleElementLevel IS 'ONIX List 149';

CREATE TABLE CollectionTitles  (
	CollectionId               	integer NOT NULL,
	TitleType                  	char(2) NOT NULL,
	EffectiveLanguageCode      	char(2) NOT NULL,
	EffectiveTitle             	varchar(1024) NOT NULL,
	FlagFixed                  	boolean NOT NULL,
	ShadowEffectiveLanguageCode	char(2) NOT NULL,
	ShadowEffectiveTitle       	varchar(1024) NOT NULL,
	PRIMARY KEY(CollectionId,TitleType)
);
COMMENT ON TABLE CollectionTitles IS 'This table describes titles for the Collection entities. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX tag P.5.6.';
COMMENT ON COLUMN CollectionTitles.TitleType IS 'ONIX List 15';
COMMENT ON COLUMN CollectionTitles.EffectiveLanguageCode IS 'If FlagFixed = true, this field is assigned by the user, otherwise is copied from ShadowEffectiveLanguageCode.';
COMMENT ON COLUMN CollectionTitles.EffectiveTitle IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated with the CollectionTitleElements. The goal of the field is to have an easy to access full title (that can be fragmented).';
COMMENT ON COLUMN CollectionTitles.FlagFixed IS 'When this field is true, then the EffectiveTitle is set by the end user and must not be changed or recalculated.';
COMMENT ON COLUMN CollectionTitles.ShadowEffectiveLanguageCode IS 'This field is taken from the language attribute of the title elements (if present) or inherited from the product default. ONIX List 74 (ISO 639-2/B) converted to ISO 639-1 (2 chars).';
COMMENT ON COLUMN CollectionTitles.ShadowEffectiveTitle IS 'The calculated (from fragments) full title.';

CREATE TABLE Collections  (
	CollectionId     	integer NOT NULL,
	CollectionType   	char(2) NOT NULL,
	SourceName       	varchar(64) NULL,
	Name             	varchar(256) NOT NULL,
	ReplaceWithThisId	integer NULL,
	FlagInvisible    	boolean NOT NULL,
	FlagDeleted      	boolean NOT NULL,
	CreationDate     	timestamp NOT NULL,
	LastUpdateDate   	timestamp NULL,
	DeletionDate     	timestamp NULL,
	PRIMARY KEY(CollectionId)
);
COMMENT ON TABLE Collections IS 'This table describes the Collection entities. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX Group P.5.';
COMMENT ON COLUMN Collections.CollectionType IS 'ONIX List 148';
COMMENT ON COLUMN Collections.SourceName IS 'Name of the organization that created the collection.';
COMMENT ON COLUMN Collections.Name IS 'Internal name for company use';
COMMENT ON COLUMN Collections.ReplaceWithThisId IS 'If this field has a value, then this CollectionId must be replaced with the stated value. This is useful to data curation from different providers.';

CREATE TABLE ContributorDates  (
	ContributorId   	integer NOT NULL,
	DateRole        	char(2) NOT NULL,
	DateFormat      	char(2) NOT NULL,
	DateValue       	date NOT NULL,
	FlagFixed       	boolean NOT NULL,
	ShadowDateFormat	char(2) NOT NULL,
	ShadowDateValue 	date NOT NULL,
	PRIMARY KEY(ContributorId,DateRole)
);
COMMENT ON TABLE ContributorDates IS 'This table stores Contributor Dates as indicated by ONIX 3.0 tags P.7.37 to P.7.39. The supported date formats are "00" to "05". The date is stored using "1" as value for fields not specified. For example, "05" for 1999 will be stored as 1999-01-01. The Quarter, Season and Week are calculated from the stated date.';
COMMENT ON COLUMN ContributorDates.DateFormat IS 'ONIX List 55';
COMMENT ON COLUMN ContributorDates.ShadowDateFormat IS 'ONIX List 55';

CREATE TABLE ContributorIdentifiers  (
	IdentifierTypeId	integer NOT NULL,
	IDValue         	varchar(256) NOT NULL,
	ContributorId   	integer NOT NULL,
	FlagPrimary     	boolean NOT NULL,
	PRIMARY KEY(IdentifierTypeId,IDValue)
);
COMMENT ON TABLE ContributorIdentifiers IS 'This table describes the Ids for Contributor entities. It is self-populated by fields P.7.6 to P.7.8 as a result of ONIX 3.0 file processing.';
COMMENT ON COLUMN ContributorIdentifiers.IdentifierTypeId IS ' According to Identifiers Table Pattern on ONIX 3.0 List 44.';

CREATE TABLE ContributorPlaces  (
	ContributorId	integer NOT NULL,
	PlaceRelator 	char(2) NOT NULL,
	CountryCode  	char(2) NULL,
	RegionCode   	varchar(32) NULL,
	PRIMARY KEY(ContributorId,PlaceRelator)
);
COMMENT ON TABLE ContributorPlaces IS 'This table stores the places related to a Contributor. It is generated from ONIX 3.0 tags P.7.48 to P.7.50.';

CREATE TABLE ContributorWebsites  (
	ContributorId       	integer NOT NULL,
	WebsiteRole         	char(2) NOT NULL,
	WebsiteLink         	varchar(512) NOT NULL,
	Description         	varchar(512) NULL,
	FlagFixed           	boolean NOT NULL,
	EffectiveLink       	varchar(512) NOT NULL,
	EffectiveDescription	varchar(512) NULL,
	PRIMARY KEY(ContributorId,WebsiteRole)
);
COMMENT ON TABLE ContributorWebsites IS 'This table stores Contributor Websites as indicated by ONIX 3.0 tags P.7.43 to P.7.45.';
COMMENT ON COLUMN ContributorWebsites.FlagFixed IS 'When this field is true, then the Effective* fields are set by the end user and must not be changed or recalculated.';
COMMENT ON COLUMN ContributorWebsites.EffectiveLink IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated from the corresponding field.';
COMMENT ON COLUMN ContributorWebsites.EffectiveDescription IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated from the corresponding field.';

CREATE TABLE Contributors  (
	ContributorId     	integer NOT NULL,
	PersonName        	varchar(512) NOT NULL,
	FlagFixed         	boolean NOT NULL,
	ShadowPersonName  	varchar(512) NOT NULL,
	PersonNameInverted	varchar(512) NULL,
	FlagIsCorporate   	boolean NOT NULL,
	TitlesBeforeNames 	varchar(256) NULL,
	NamesBeforeKey    	varchar(256) NULL,
	PrefixToKey       	varchar(256) NULL,
	KeyNames          	varchar(256) NULL,
	NamesAfterKey     	varchar(256) NULL,
	SuffixToKey       	varchar(256) NULL,
	LettersAfterNames 	varchar(256) NULL,
	TitlesAfterNames  	varchar(256) NULL,
	ReplaceWithThisId 	integer NULL,
	FlagInvisible     	boolean NOT NULL,
	FlagDeleted       	boolean NOT NULL,
	CreationDate      	timestamp NOT NULL,
	LastUpdateDate    	timestamp NULL,
	DeletionDate      	timestamp NULL,
	PRIMARY KEY(ContributorId)
);
COMMENT ON TABLE Contributors IS 'This table describes the Contributor entities. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX Group P.7.';
COMMENT ON COLUMN Contributors.PersonName IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated with the Contributor name parts. The goal of the field is to have an easy to access full name.';
COMMENT ON COLUMN Contributors.FlagFixed IS 'When this field is true, then the EffectiveName is set by the end user and must not be changed or recalculated.';
COMMENT ON COLUMN Contributors.ShadowPersonName IS 'See FlagIsCorporate';
COMMENT ON COLUMN Contributors.PersonNameInverted IS 'See FlagIsCorporate';
COMMENT ON COLUMN Contributors.FlagIsCorporate IS 'This flag is true if PersonName and PersonNameInverted are Corporate names (comming from ONIX tags P.7.19 and P.7.20 instead of P.7.9 and P.7.10 and associated fields).';
COMMENT ON COLUMN Contributors.ReplaceWithThisId IS 'If this field has a value, then this ContributorId must be replaced with the stated value. This is useful to data curation from different providers.';

CREATE TABLE DesignDocumentHeaders  (
	DesignId   	integer NOT NULL,
	EntityType 	char(4) NOT NULL,
	EntityId   	integer NOT NULL,
	DocumentId 	integer NOT NULL,
	HeaderName 	varchar(256) NOT NULL,
	HeaderValue	varchar(256) NULL,
	PRIMARY KEY(DesignId,EntityType,EntityId,DocumentId,HeaderName)
);
COMMENT ON TABLE DesignDocumentHeaders IS 'This table contains HTTP headers for each document.';
COMMENT ON COLUMN DesignDocumentHeaders.EntityId IS 'If the documnent applies to all Entities of a given EntityType, then it must be -1';

CREATE TABLE DesignDocuments  (
	DesignId        	integer NOT NULL,
	EntityType      	char(4) NOT NULL,
	EntityId        	integer NOT NULL,
	DocumentId      	integer NOT NULL,
	DocumentName    	varchar(128) NOT NULL,
	URLGeneratorName	varchar(256) NOT NULL,
	URLName         	varchar(64) NOT NULL,
	DataViewName    	varchar(256) NOT NULL,
	TemplateName    	varchar(256) NOT NULL,
	RepositoryName  	varchar(256) NOT NULL,
	TagList         	varchar(256) NOT NULL,
	FlagPaginated   	boolean NOT NULL,
	PRIMARY KEY(DesignId,EntityType,EntityId,DocumentId)
);
COMMENT ON TABLE DesignDocuments IS 'This table stores the list of documents to generate for each type of EntityType (or even an specific Entity) for each Design.';
COMMENT ON COLUMN DesignDocuments.EntityId IS 'If the documnent applies to all Entities of a given EntityType, then it must be -1';
COMMENT ON COLUMN DesignDocuments.URLName IS 'Informs to what URL the document applies. This is one of all the URLs the generator created. The target URL could be a list of URLs (such as for non-cannonical urls)';

CREATE TABLE DesignURLGenerators  (
	DesignId     	integer NOT NULL,
	GeneratorName	varchar(64) NOT NULL,
	URLName      	varchar(64) NOT NULL,
	URLPattern   	varchar(256) NOT NULL,
	PRIMARY KEY(DesignId,GeneratorName,URLName)
);
COMMENT ON TABLE DesignURLGenerators IS 'This table stores the set of URLs associated to a URL Generator, referenced in the table DesignDocuments.';

CREATE TABLE Designs  (
	DesignId             	integer NOT NULL,
	DesignName           	varchar(256) NOT NULL,
	DesignVersion        	integer NOT NULL,
	DesignStatus         	char(2) NOT NULL,
	DesignStaticFilesPath	varchar(512) NOT NULL,
	HashedId             	varchar(32) NOT NULL,
	FlagDeleted          	boolean NOT NULL,
	CreationDate         	timestamp NOT NULL,
	LastUpdateDate       	timestamp NULL,
	DeletionDate         	timestamp NULL,
	PRIMARY KEY(DesignId)
);
COMMENT ON TABLE Designs IS 'This table stores the different designs -look and feel, etc.';
COMMENT ON COLUMN Designs.DesignStatus IS 'Indicates the status of the design (beta test, production, development, etc)';
COMMENT ON COLUMN Designs.DesignStaticFilesPath IS 'This field points to a directory in a single repository (AWS S3) where the static files (logos, css, etc) for the Design reside.';

CREATE TABLE Entities  (
	EntityType    	char(4) NOT NULL,
	EntityId      	integer NOT NULL,
	Name          	varchar(512) NOT NULL,
	HashedId      	varchar(32) NOT NULL,
	FlagDeleted   	boolean NOT NULL,
	CreationDate  	timestamp NOT NULL,
	LastUpdateDate	timestamp NULL,
	DeletionDate  	timestamp NULL,
	PRIMARY KEY(EntityType,EntityId)
);
COMMENT ON TABLE Entities IS 'This table registers the defined entities. When an entry is added in any of the tables, then an entry is added in this table.';
COMMENT ON COLUMN Entities.Name IS 'This field must be keept up to date with the real Entity Name. For example, if a book changes title, then this field must be updated to.';
COMMENT ON COLUMN Entities.HashedId IS 'Stores a hashed id that can be exposed without revealing a sequence number.';

CREATE TABLE EntityRatings  (
	EntityType    	char(4) NOT NULL,
	EntityId      	integer NOT NULL,
	RatingId      	integer NOT NULL,
	UserId        	integer NOT NULL,
	CommentStatus 	char(2) NOT NULL,
	CommentText   	varchar(4096) NOT NULL,
	Rating        	integer NOT NULL,
	CreationDate  	timestamp NOT NULL,
	LastUpdateDate	timestamp NULL,
	PRIMARY KEY(EntityType,EntityId,RatingId)
);
COMMENT ON TABLE EntityRatings IS 'This table stores User Comnents and Ratings for an Entity.';

CREATE TABLE EntityRelatedEntities  (
	EntityType             	char(4) NOT NULL,
	EntityId               	integer NOT NULL,
	EntityRelationCode     	char(2) NOT NULL,
	EntryOrder             	integer NOT NULL,
	RelatedEntityType      	char(4) NOT NULL,
	RelatedEntityId        	integer NOT NULL,
	OriginalRelatedEntityId	integer NULL,
	PRIMARY KEY(EntityType,EntityId,EntityRelationCode,EntryOrder)
);
COMMENT ON TABLE EntityRelatedEntities IS 'This table stores Content relation between Entities (for example, this movie is a remake of this other, this book is a second edition of this other book). This type of relation is about the product themselves (not the content). In particular, for Products it is used as indicated by ONIX 3.0 tags P.23.';
COMMENT ON COLUMN EntityRelatedEntities.EntityRelationCode IS 'ONIX List 51. This field is named ProductRelationCode in the spec. The name changed here because of the Entity reuse.';
COMMENT ON COLUMN EntityRelatedEntities.OriginalRelatedEntityId IS 'The original EntityId if it was replaced because of the ReplaceWithThisId field was not NULL. There is no option to replace one entity with another entity of different type, hence no OriginalRelatedEntityType field.';

CREATE TABLE EntityResourceAudiences  (
	EntityType  	char(4) NOT NULL,
	EntityId    	integer NOT NULL,
	ContentType 	char(2) NOT NULL,
	EntryId     	integer NOT NULL,
	AudienceCode	char(2) NOT NULL,
	PRIMARY KEY(EntityType,EntityId,ContentType,EntryId,AudienceCode)
);
COMMENT ON TABLE EntityResourceAudiences IS 'This table stores the Audience Codes for Entity Resources.';
COMMENT ON COLUMN EntityResourceAudiences.AudienceCode IS 'ONIX List 154';

CREATE TABLE EntityResourceFeatures  (
	EntityType  	char(4) NOT NULL,
	EntityId    	integer NOT NULL,
	ContentType 	char(2) NOT NULL,
	EntryId     	integer NOT NULL,
	FeatureType 	char(2) NOT NULL,
	FeatureValue	varchar(256) NULL,
	FeatureNote 	varchar(512) NULL,
	PRIMARY KEY(EntityType,EntityId,ContentType,EntryId,FeatureType)
);
COMMENT ON TABLE EntityResourceFeatures IS 'This table stores the Features for Entity Resources.';
COMMENT ON COLUMN EntityResourceFeatures.FeatureType IS 'ONIX List 160';

CREATE TABLE EntityResources  (
	EntityType         	char(4) NOT NULL,
	EntityId           	integer NOT NULL,
	ContentType        	char(2) NOT NULL,
	EntryId            	integer NOT NULL,
	ResourceMode       	char(2) NOT NULL,
	ResourceForm       	char(2) NOT NULL,
	ResourceLink       	varchar(512) NOT NULL,
	FlagLocalCopy      	boolean NOT NULL,
	FlagFixed          	boolean NOT NULL,
	ShadowResourceForm 	char(2) NOT NULL,
	ShadowResourceLink 	varchar(512) NOT NULL,
	ShadowFlagLocalCopy	boolean NOT NULL,
	PRIMARY KEY(EntityType,EntityId,ContentType,EntryId)
);
COMMENT ON TABLE EntityResources IS 'This table stores links to resources for many entities (Products, Collections, Contributors, etc).

Defined values for EntityType are:

- PROD (Table Products, Id ProductId)
- CONT (Table Contributors, Id ContributorId)
- COLL (Table Collections, Id CollectionId)
- PUBL (Table Publishers, Id PublisherId)
- IMPR (Table Imprints, Id ImprintId)
- SUBJ (Table Subjects, Id SubjectId)
- PAGE (Table Pages, Id PageId) - static pages';
COMMENT ON COLUMN EntityResources.ContentType IS 'ONIX List 158';
COMMENT ON COLUMN EntityResources.ResourceMode IS 'ONIX List 159';
COMMENT ON COLUMN EntityResources.ResourceForm IS 'ONIX List 161';
COMMENT ON COLUMN EntityResources.ShadowResourceForm IS 'ONIX List 161';

CREATE TABLE EntitySnapshotRatings  (
	EntityType    	char(4) NOT NULL,
	EntityId      	integer NOT NULL,
	BestCommentId 	integer NULL,
	WorstCommentId	integer NULL,
	Rating5Count  	integer NOT NULL,
	Rating4Count  	integer NOT NULL,
	Rating3Count  	integer NOT NULL,
	Rating2Count  	integer NOT NULL,
	Rating1Count  	integer NOT NULL,
	PRIMARY KEY(EntityType,EntityId)
);
COMMENT ON TABLE EntitySnapshotRatings IS 'This table stores the most recen snapshot rating for a Entity.';

CREATE TABLE EntityTextAudiences  (
	EntityType  	char(4) NOT NULL,
	EntityId    	integer NOT NULL,
	EntryCode   	varchar(4) NOT NULL,
	EntryId     	integer NOT NULL,
	AudienceCode	char(2) NOT NULL,
	PRIMARY KEY(EntityType,EntityId,EntryCode,EntryId,AudienceCode)
);
COMMENT ON TABLE EntityTextAudiences IS 'This table stores the Audience Codes for Entity Texts.';
COMMENT ON COLUMN EntityTextAudiences.AudienceCode IS 'ONIX List 154';

CREATE TABLE EntityTextDates  (
	EntityType      	char(4) NOT NULL,
	EntityId        	integer NOT NULL,
	EntryCode       	varchar(4) NOT NULL,
	EntryId         	integer NOT NULL,
	DateRole        	char(2) NOT NULL,
	DateFormat      	char(2) NOT NULL,
	DateValue       	date NOT NULL,
	FlagFixed       	boolean NOT NULL,
	ShadowDateFormat	char(2) NOT NULL,
	ShadowDateValue 	date NOT NULL,
	PRIMARY KEY(EntityType,EntityId,EntryCode,EntryId,DateRole)
);
COMMENT ON TABLE EntityTextDates IS 'This table stores the Dates for Entity Texts. The supported date formats are "00" to "05". The date is stored using "1" as value for fields not specified. For example, "05" for 1999 will be stored as 1999-01-01. The Quarter, Season and Week are calculated from the stated date.';
COMMENT ON COLUMN EntityTextDates.DateRole IS 'ONIX List 155';
COMMENT ON COLUMN EntityTextDates.DateFormat IS 'ONIX List 55';
COMMENT ON COLUMN EntityTextDates.ShadowDateFormat IS 'ONIX List 55';

CREATE TABLE EntityTexts  (
	EntityType              	char(4) NOT NULL,
	EntityId                	integer NOT NULL,
	EntryCode               	varchar(4) NOT NULL,
	EntryId                 	integer NOT NULL,
	TextLanguage            	char(2) NOT NULL,
	TextFormat              	char(2) NOT NULL,
	TextContent             	text NOT NULL,
	FlagFixed               	boolean NOT NULL,
	ShadowTextLanguage      	char(2) NOT NULL,
	ShadowTextFormat        	char(2) NOT NULL,
	ShadowTextContent       	text NOT NULL,
	InRelationWithEntityType	char(4) NULL,
	InRelationWithEntityId  	integer NULL,
	CorporateSource         	varchar(256) NULL,
	SourceTitle             	varchar(512) NULL,
	PRIMARY KEY(EntityType,EntityId,EntryCode,EntryId)
);
COMMENT ON TABLE EntityTexts IS 'This table stores the texts for many entities (Products, Collections, Contributors, etc).

Defined values for EntityType are:

- PROD (Table Products, Id ProductId)
- CONT (Table Contributors, Id ContributorId)
- COLL (Table Collections, Id CollectionId)
- PUBL (Table Publishers, Id PublisherId)
- IMPR (Table Imprints, Id ImprintId)
- SUBJ (Table Subjects, Id SubjectId)
- PAGE (Table Pages, Id PageId) - static pages';
COMMENT ON COLUMN EntityTexts.EntryCode IS 'Specific code for the entry. From many sources, ex: ONIX List 153, ONIX List 17, etc.';
COMMENT ON COLUMN EntityTexts.EntryId IS 'This Id field can be used to identify a Text for a given Entity. It is assigned from a sequence. It will be useful when editing manual content to reference a particular entry.';
COMMENT ON COLUMN EntityTexts.TextFormat IS 'ONIX List 34';
COMMENT ON COLUMN EntityTexts.FlagFixed IS 'When this field is true, then the Effective* fields are set by the end user and must not be changed or recalculated.';
COMMENT ON COLUMN EntityTexts.ShadowTextFormat IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated with the TextContent. The goal of the field is to have an easy to access text. ONIX List 34';
COMMENT ON COLUMN EntityTexts.ShadowTextContent IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated with the TextFormat. The goal of the field is to have an easy to access content format.';
COMMENT ON COLUMN EntityTexts.InRelationWithEntityType IS 'When the entry is associated with an <entiy, entity> relation, this will hold the secondary entity type. For example, used for texts in the relation < Product, Contributor>.';
COMMENT ON COLUMN EntityTexts.InRelationWithEntityId IS 'When the entry is associated with an <entiy, entity> relation, this will hold the secondary entity id. For example, used for texts in the relation < Product, Contributor>.';

CREATE TABLE EntityTypeURLPatternSelectors  (
	EntityType      	char(4) NOT NULL,
	PatternId       	integer NOT NULL,
	SelectorPath    	varchar(512) NOT NULL,
	SelectorOperator	char(2) NOT NULL,
	SelectorValue   	varchar(1024) NOT NULL,
	FlagDeleted     	boolean NOT NULL,
	PRIMARY KEY(EntityType,PatternId,SelectorPath)
);
COMMENT ON TABLE EntityTypeURLPatternSelectors IS 'This table stores selector conditions on URL Patterns for a given EntityType. The need for this table is that a single Entity Type (ex: Product) can group many different things (books, cds, dvds, etc). The Selectors then provide a mechanism to filter out patterns based on Entity subtype (attributes). All Selectors for a given entry are ANDed and hence all must be true for the pattern to be used.';
COMMENT ON COLUMN EntityTypeURLPatternSelectors.SelectorPath IS 'Attribute name (xpath or similar)';

CREATE TABLE EntityTypeURLPatterns  (
	EntityType 	char(4) NOT NULL,
	PatternId  	integer NOT NULL,
	FlagPrimary	boolean NOT NULL,
	PRIMARY KEY(EntityType,PatternId)
);
COMMENT ON TABLE EntityTypeURLPatterns IS 'This table indicates what entities have what URL patterns. This relation provides the mechanism for URL generation when an entity is created.';

CREATE TABLE EntityTypes  (
	EntityType        	char(4) NOT NULL,
	TableSchema       	varchar(128) NOT NULL,
	TableName         	varchar(128) NOT NULL,
	IdField           	varchar(128) NOT NULL,
	Name              	varchar(64) NOT NULL,
	Description       	varchar(512) NOT NULL,
	DescriptionPattern	varchar(256) NOT NULL,
	FlagDeleted       	boolean NOT NULL,
	CreationDate      	timestamp NOT NULL,
	LastUpdateDate    	timestamp NULL,
	DeletionDate      	timestamp NULL,
	PRIMARY KEY(EntityType)
);
COMMENT ON TABLE EntityTypes IS 'This table stores the system Entity Types';
COMMENT ON COLUMN EntityTypes.DescriptionPattern IS 'This field is used to create the Entities.Description field.';

CREATE TABLE EntityURLs  (
	EntityType       	char(4) NOT NULL,
	EntityId         	integer NOT NULL,
	URLId            	integer NOT NULL,
	InitialEntityType	char(4) NOT NULL,
	InitialEntityId  	integer NOT NULL,
	FlagPrimary      	boolean NOT NULL,
	PRIMARY KEY(EntityType,EntityId,URLId)
);
COMMENT ON TABLE EntityURLs IS 'This table stores the relation between Entities (Products, Publishers, Authors, etc) and URLs the system publishes.';
COMMENT ON COLUMN EntityURLs.InitialEntityType IS 'This value is assigned at creation from EntityType and is never changed, no matter what happens whit the URL.';
COMMENT ON COLUMN EntityURLs.InitialEntityId IS 'This value is assigned at creation from EntityId and is never changed, no matter what happens whit the URL.';
COMMENT ON COLUMN EntityURLs.FlagPrimary IS 'This flag indicates that this URL is the primary (cannonical) for this Product.';

CREATE TABLE ExchangeRates  (
	StoreId         	integer NOT NULL,
	FromCurrencyCode	char(3) NOT NULL,
	ToCurrencyCode  	char(3) NOT NULL,
	FromDate        	timestamp NOT NULL,
	ToDate          	timestamp NOT NULL,
	BuyRate         	numeric(15,5) NOT NULL,
	SellRate        	numeric(15,5) NOT NULL,
	PRIMARY KEY(StoreId,FromCurrencyCode,ToCurrencyCode,FromDate,ToDate)
);
COMMENT ON TABLE ExchangeRates IS 'This table keeps the history of exchange rates.';
COMMENT ON COLUMN ExchangeRates.FromDate IS 'This value is included on the interval (ALWAYS compare with "greater than or equal" this value).';
COMMENT ON COLUMN ExchangeRates.ToDate IS 'This value is not included on the interval (ALWAYS compare with "less than" this value). For the current record, this value should be 10000-01-01 00:00:00.0000000.';

CREATE TABLE IdentifierTypes  (
	IdentifierTypeId	integer NOT NULL,
	Name            	varchar(128) NOT NULL,
	CodeTableId     	integer NOT NULL,
	Value           	varchar(128) NOT NULL,
	FlagProprietary 	boolean NOT NULL,
	Description     	varchar(512) NULL,
	FlagDeleted     	boolean NOT NULL,
	CreationDate    	timestamp NOT NULL,
	LastUpdateDate  	timestamp NULL,
	DeletionDate    	timestamp NULL,
	PRIMARY KEY(IdentifierTypeId)
);
COMMENT ON TABLE IdentifierTypes IS 'This table provides a compact coding for the Identifier Type Name (*Identifiers.TypeName). Values should be auto-inserted in this table using a unique ID (sequence). This auto-insert must use the TypeName and set it for fields Name and Value.

ONIX lists have a set of defined values (ex: List 44, value 16 ISNI) and a method to encode proprietary types:
- Predefined: <ONIXList, Value, FlagProprietary> = < 44, "16", false>
- Proprietary: <ONIXList, Value, FlagProprietary> = < 44, "com.ilhsa", true>';
COMMENT ON COLUMN IdentifierTypes.CodeTableId IS 'The ONIX list id';
COMMENT ON COLUMN IdentifierTypes.Value IS 'The ONIX list value (for defined items) or the proprietary name for proprietary items';

CREATE TABLE ImprintIdentifiers  (
	IdentifierTypeId	integer NOT NULL,
	IDValue         	varchar(256) NOT NULL,
	ImprintId       	integer NOT NULL,
	FlagPrimary     	boolean NOT NULL,
	PRIMARY KEY(IdentifierTypeId,IDValue)
);
COMMENT ON TABLE ImprintIdentifiers IS 'This table describes the Ids for Imprint entities. It is self-populated by fields P.19.1 to P.19.3 as a result of ONIX 3.0 file processing.';
COMMENT ON COLUMN ImprintIdentifiers.IdentifierTypeId IS 'According to Identifiers Table Pattern on ONIX 3.0 List 44.';

CREATE TABLE Imprints  (
	ImprintId        	integer NOT NULL,
	Name             	varchar(256) NOT NULL,
	FlagFixed        	boolean NOT NULL,
	ShadowName       	varchar(256) NOT NULL,
	ReplaceWithThisId	integer NULL,
	FlagInvisible    	boolean NOT NULL,
	FlagDeleted      	boolean NOT NULL,
	CreationDate     	timestamp NOT NULL,
	LastUpdateDate   	timestamp NULL,
	DeletionDate     	timestamp NULL,
	PRIMARY KEY(ImprintId)
);
COMMENT ON TABLE Imprints IS 'This table stores Imprint information as indicated by ONIX 3.0 tags P.19.4.';
COMMENT ON COLUMN Imprints.Name IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated from the ShadowName field. The goal of the field is to have an easy to access full name.';
COMMENT ON COLUMN Imprints.FlagFixed IS 'When this field is true, then the EffectiveName is set by the end user and must not be changed or recalculated.';
COMMENT ON COLUMN Imprints.ShadowName IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated from the Name field. The goal of the field is to have an easy to access full name.';
COMMENT ON COLUMN Imprints.ReplaceWithThisId IS 'If this field has a value, then this ImprintId must be replaced with the stated value. This is useful to data curation from different providers.';

CREATE TABLE InterchangeTypes  (
	InterchangeType	char(4) NOT NULL,
	Name           	varchar(32) NOT NULL,
	Description    	varchar(256) NOT NULL,
	FlagEnabled    	boolean NOT NULL,
	PRIMARY KEY(InterchangeType)
);
COMMENT ON TABLE InterchangeTypes IS 'Registers all the enabled Interchange Formats (ex: ONIX).';

CREATE TABLE MessageStatus  (
	TypeInterchange	char(4) NOT NULL,
	MessageStatus  	char(2) NOT NULL,
	Name           	varchar(32) NOT NULL,
	Description    	varchar(256) NOT NULL,
	FlagEnabled    	boolean NOT NULL,
	PRIMARY KEY(TypeInterchange,MessageStatus)
);
COMMENT ON TABLE MessageStatus IS 'This table registers the available Processing Statuses for different Interchange Types (ex: PE=pending, ER=error, PR=processed)';

CREATE TABLE OriginMessages  (
	OriginId       	integer NOT NULL,
	IdMessage      	integer NOT NULL,
	TypeInterchange	char(4) NOT NULL,
	MessageStatus  	char(2) NOT NULL,
	Note           	varchar(512) NULL,
	MessageDate    	timestamp NOT NULL,
	ReceiveDate    	timestamp NOT NULL,
	StatusDate     	timestamp NOT NULL,
	FileName       	varchar(256) NULL,
	PRIMARY KEY(OriginId,IdMessage)
);
COMMENT ON TABLE OriginMessages IS 'Each message (file) received is registered in this table, together with processing status.';

CREATE TABLE Origins  (
	OriginId           	integer NOT NULL,
	Name               	varchar(128) NOT NULL,
	Description        	varchar(256) NOT NULL,
	InterchangeType    	char(4) NOT NULL,
	InterchangeCode    	varchar(256) NULL,
	InterchangeUser    	varchar(256) NULL,
	InterchangePassword	varchar(256) NULL,
	FlagSender         	boolean NOT NULL,
	FlagReceiver       	boolean NOT NULL,
	FlagFulfillment    	boolean NOT NULL,
	FlagEnabled        	boolean NOT NULL,
	PRIMARY KEY(OriginId)
);
COMMENT ON TABLE Origins IS 'This table registers the different data Origins (ex: ILHSA) and states if the Origin works as a Sender, Receiver and/or Fulfillment center. It also indicates the Data Interchange type and certain parameters.';

CREATE TABLE PageURLs  (
	PageId        	integer NOT NULL,
	EntryOrder    	integer NOT NULL,
	URL           	varchar(512) NOT NULL,
	FlagPrimaryURL	boolean NOT NULL,
	FlagDeleted   	boolean NOT NULL,
	CreationDate  	timestamp NOT NULL,
	LastUpdateDate	timestamp NULL,
	DeletionDate  	timestamp NULL,
	PRIMARY KEY(PageId,EntryOrder)
);
COMMENT ON TABLE PageURLs IS 'This table records the defined URLs for a static page.';

CREATE TABLE Pages  (
	PageId        	integer NOT NULL,
	Name          	varchar(128) NOT NULL,
	Description   	varchar(512) NULL,
	FlagDeleted   	boolean NOT NULL,
	CreationDate  	timestamp NOT NULL,
	LastUpdateDate	timestamp NULL,
	DeletionDate  	timestamp NULL,
	PRIMARY KEY(PageId)
);
COMMENT ON TABLE Pages IS 'This table registers the static pages of the system.';

CREATE TABLE ProductAudienceRanges  (
	ProductId     	integer NOT NULL,
	EntryOrder    	integer NOT NULL,
	RangeQualifier	char(2) NOT NULL,
	FromValue     	varchar(16) NULL,
	ToValue       	varchar(16) NULL,
	PRIMARY KEY(ProductId,EntryOrder)
);
COMMENT ON TABLE ProductAudienceRanges IS 'This table stores a Product Audience Ranges as defined by ONIX 3.0 tags P.13.5 to P.13.9.

When the AudienceRangePrecision is "01" (Exact) then the same value is copied in FromValue and ToValue. Otherwhise, the FromValue and ToValue are filled depending on the RangePrecision.';
COMMENT ON COLUMN ProductAudienceRanges.RangeQualifier IS 'ONIX List 30';

CREATE TABLE ProductAudiences  (
	ProductId   	integer NOT NULL,
	AudienceCode	char(2) NOT NULL,
	PRIMARY KEY(ProductId,AudienceCode)
);
COMMENT ON TABLE ProductAudiences IS 'This table stores the Product Audiences as defined in ONIX 3.0 tag P.13.1.';

CREATE TABLE ProductCollections  (
	ProductId           	integer NOT NULL,
	CollectionId        	integer NOT NULL,
	OriginalCollectionId	integer NULL,
	PRIMARY KEY(ProductId,CollectionId)
);
COMMENT ON TABLE ProductCollections IS 'This table holds the relation between Products and the Collections they belong to. It is formed by the ONIX tags in group P.5.';
COMMENT ON COLUMN ProductCollections.OriginalCollectionId IS 'The original CollectionId if it was replaced because of the ReplaceWithThisId field was not NULL.';

CREATE TABLE ProductContentContributors  (
	ProductId            	integer NOT NULL,
	EntryOrder           	integer NOT NULL,
	EntrySequence        	varchar(25) NULL,
	ContributorId        	integer NOT NULL,
	ContributorRole      	char(3) NOT NULL,
	OriginalContributorId	integer NULL,
	PRIMARY KEY(ProductId,EntryOrder,EntrySequence)
);
COMMENT ON TABLE ProductContentContributors IS 'This table holds the relation between Product Content entries and the Contributors the took part in the creation of the entry. It is formed by the ONIX tags in group P.18.';
COMMENT ON COLUMN ProductContentContributors.EntrySequence IS 'This field is not named EntryOrder because we are inheriting a field with that name in the Primary Key';
COMMENT ON COLUMN ProductContentContributors.ContributorRole IS 'ONIX List 17';
COMMENT ON COLUMN ProductContentContributors.OriginalContributorId IS 'The original ContributorId if it was replaced because of the ReplaceWithThisId field was not NULL.';

CREATE TABLE ProductContentTitleElements  (
	ProductId         	integer NOT NULL,
	EntryOrder        	integer NOT NULL,
	TitleType         	char(2) NOT NULL,
	SequenceNumber    	integer NOT NULL,
	TitleElementLevel 	char(2) NOT NULL,
	LanguageCode      	char(2) NOT NULL,
	PartNumber        	varchar(64) NULL,
	YearOfAnnual      	varchar(64) NULL,
	TitleText         	varchar(512) NULL,
	TitlePrefix       	varchar(64) NULL,
	TitleWithoutPrefix	varchar(512) NULL,
	Subtitle          	varchar(512) NULL,
	PRIMARY KEY(ProductId,EntryOrder,TitleType,SequenceNumber)
);
COMMENT ON TABLE ProductContentTitleElements IS 'This table describes titles for the Product content entries. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX tags P.18.11 to P.18.18.';
COMMENT ON COLUMN ProductContentTitleElements.EntryOrder IS 'Sequential number assigned to each element informed by Onix.';
COMMENT ON COLUMN ProductContentTitleElements.TitleElementLevel IS 'ONIX List 149';

CREATE TABLE ProductContentTitles  (
	ProductId            	integer NOT NULL,
	EntryOrder           	integer NOT NULL,
	TitleType            	char(2) NOT NULL,
	EffectiveLanguageCode	char(2) NOT NULL,
	EffectiveTitle       	varchar(1024) NOT NULL,
	FlagFixed            	boolean NOT NULL,
	ShadowLanguageCode   	char(2) NOT NULL,
	ShadowTitle          	varchar(1024) NOT NULL,
	PRIMARY KEY(ProductId,EntryOrder,TitleType)
);
COMMENT ON TABLE ProductContentTitles IS 'This table describes titles for the Product Content entries. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX tag P.18.';
COMMENT ON COLUMN ProductContentTitles.TitleType IS 'ONIX List 15';
COMMENT ON COLUMN ProductContentTitles.EffectiveLanguageCode IS 'This field is taken from the language attribute of the title elements (if present) or inherited from the product default. ONIX List 74 (ISO 639-2/B) converted to ISO 639-1 (2 chars).';
COMMENT ON COLUMN ProductContentTitles.EffectiveTitle IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated with the CollectionTitleElements. The goal of the field is to have an easy to access full title.';
COMMENT ON COLUMN ProductContentTitles.FlagFixed IS 'When this field is true, then the EffectiveTitle is set by the end user and must not be changed or recalculated.';

CREATE TABLE ProductContents  (
	ProductId        	integer NOT NULL,
	EntryOrder       	integer NOT NULL,
	SequenceNumber   	varchar(32) NOT NULL,
	TextItemType     	char(2) NOT NULL,
	NumberOfPages    	integer NULL,
	ComponentTypeName	varchar(32) NULL,
	ComponentNumber  	varchar(32) NULL,
	PRIMARY KEY(ProductId,EntryOrder)
);
COMMENT ON TABLE ProductContents IS 'This table stores the Product Table of Contents (for Music: the list of songs) as specified in ONIX 3.0 tags P.18.';
COMMENT ON COLUMN ProductContents.EntryOrder IS 'This defines the sequential order in which the entries must be reported';
COMMENT ON COLUMN ProductContents.SequenceNumber IS 'Can be something like 1, 2, 3, etc or something like 1, 1.1, 1.1.1, 1.2, etc';
COMMENT ON COLUMN ProductContents.TextItemType IS 'ONIX List 42';
COMMENT ON COLUMN ProductContents.NumberOfPages IS 'For Music and Video, the length in seconds';

CREATE TABLE ProductContributors  (
	ProductId            	integer NOT NULL,
	EntryOrder           	integer NOT NULL,
	ContributorId        	integer NOT NULL,
	ContributorRole      	char(3) NOT NULL,
	OriginalContributorId	integer NULL,
	PRIMARY KEY(ProductId,EntryOrder)
);
COMMENT ON TABLE ProductContributors IS 'This table holds the relation between Products and the Contributors the took part in the creation of the Product. It is formed by the ONIX tags in group P.7.';
COMMENT ON COLUMN ProductContributors.OriginalContributorId IS 'The original ContributorId if it was replaced because of the ReplaceWithThisId field was not NULL.';

CREATE TABLE ProductEditions  (
	ProductId    	integer NOT NULL,
	EditionType  	char(3) NULL,
	EditionNumber	integer NULL,
	VersionNumber	integer NULL,
	Statement    	varchar(256) NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductEditions IS 'This table stores the Edition related info carried on by ONIX 3.0 tags P.9.1 to P.9.4.';

CREATE TABLE ProductExtents  (
	ProductId       	integer NOT NULL,
	ExtentType      	char(2) NOT NULL,
	ExtentValue     	numeric(10,3) NOT NULL,
	ExtentValueRoman	varchar(16) NULL,
	ExtentUnit      	char(2) NOT NULL,
	PRIMARY KEY(ProductId,ExtentType)
);
COMMENT ON TABLE ProductExtents IS 'This table stores the Product Extents as specified by ONIX 3.0 tags P.11.1 to P.11.4.';
COMMENT ON COLUMN ProductExtents.ExtentType IS 'ONIX List 23';
COMMENT ON COLUMN ProductExtents.ExtentUnit IS 'ONIX List 24';

CREATE TABLE ProductForm  (
	ProductId             	integer NOT NULL,
	ProductComposition    	char(2) NOT NULL,
	ProductForm           	char(2) NOT NULL,
	ProductFormDetail     	char(4) NULL,
	ProductPackaging      	char(2) NULL,
	ProductFormDescription	varchar(255) NULL,
	TradeCategory         	char(2) NULL,
	PrimaryContentType    	char(2) NULL,
	CountryOfManufacture  	char(2) NULL,
	MapScale              	numeric(7,0) NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductForm IS 'This table records part of the factual description of the product. It corresponds with many of the tags defined in ONIX 3.0 as group P.3.';
COMMENT ON COLUMN ProductForm.ProductComposition IS 'ONIX List 2';
COMMENT ON COLUMN ProductForm.ProductForm IS 'ONIX List 150';
COMMENT ON COLUMN ProductForm.ProductFormDetail IS 'ONIX List 175';
COMMENT ON COLUMN ProductForm.ProductPackaging IS 'ONIX List 80';
COMMENT ON COLUMN ProductForm.TradeCategory IS 'ONIX List 12';
COMMENT ON COLUMN ProductForm.PrimaryContentType IS 'ONIX List 81. If the ProductFormContentType table gets loaded and this field is empty, the lowest valued record must be set in this field.';
COMMENT ON COLUMN ProductForm.CountryOfManufacture IS 'ONIX List 91';

CREATE TABLE ProductFormContentTypes  (
	ProductId  	int NOT NULL,
	ContentType	char(2) NOT NULL,
	PRIMARY KEY(ProductId,ContentType)
);
COMMENT ON TABLE ProductFormContentTypes IS 'This table records parts of the factual description of the product. It correspondes with the tag P.3.11 defined in ONIX 3.0.';
COMMENT ON COLUMN ProductFormContentTypes.ContentType IS 'ONIX List 81';

CREATE TABLE ProductFormEpubTechnicalProtections  (
	ProductId          	integer NOT NULL,
	TechnicalProtection	char(2) NOT NULL,
	PRIMARY KEY(ProductId,TechnicalProtection)
);
COMMENT ON TABLE ProductFormEpubTechnicalProtections IS 'This table records part of the factual description of the product. It corresponds with tag P.3.16 of ONIX 3.0.';
COMMENT ON COLUMN ProductFormEpubTechnicalProtections.TechnicalProtection IS 'ONIX List 144';

CREATE TABLE ProductFormEpubUsageConstraintLimits  (
	ProductId 	integer NOT NULL,
	EntryOrder	integer NOT NULL,
	Unit      	char(2) NOT NULL,
	Quantity  	numeric(10,3) NOT NULL,
	PRIMARY KEY(ProductId,EntryOrder,Unit)
);
COMMENT ON TABLE ProductFormEpubUsageConstraintLimits IS 'This table records part of the factual description of the product. It corresponds with the tags P.3.19 and P.3.20 of ONIX 3.0';
COMMENT ON COLUMN ProductFormEpubUsageConstraintLimits.Unit IS 'ONIX List 147';

CREATE TABLE ProductFormEpubUsageConstraints  (
	ProductId 	integer NOT NULL,
	EntryOrder	integer NOT NULL,
	Type      	char(2) NOT NULL,
	Status    	char(2) NOT NULL,
	PRIMARY KEY(ProductId,EntryOrder)
);
COMMENT ON TABLE ProductFormEpubUsageConstraints IS 'This table records part of the factual description of the product. It corresponds with the tags P.3.17 and P.3.18 of ONIX 3.0';
COMMENT ON COLUMN ProductFormEpubUsageConstraints.Type IS 'ONIX List 145';
COMMENT ON COLUMN ProductFormEpubUsageConstraints.Status IS 'ONIX List 146';

CREATE TABLE ProductFormFeatures  (
	ProductId  	integer NOT NULL,
	FeatureType	char(2) NOT NULL,
	Value      	varchar(64) NULL,
	Description	varchar(256) NULL,
	PRIMARY KEY(ProductId,FeatureType)
);
COMMENT ON TABLE ProductFormFeatures IS 'This table records part of the factual description of the product. It corresponds with the tags defined in ONIX 3.0 as P.3.4 to P.3.6.';
COMMENT ON COLUMN ProductFormFeatures.FeatureType IS 'ONIX List 79';
COMMENT ON COLUMN ProductFormFeatures.Value IS 'ONIX Lists 76, 98, 99, 143 or 176';

CREATE TABLE ProductFormMeasures  (
	ProductId  	int NOT NULL,
	MeasureType	char(2) NOT NULL,
	Measurement	numeric(10,3) NOT NULL,
	UnitCode   	char(2) NOT NULL,
	PRIMARY KEY(ProductId,MeasureType)
);
COMMENT ON TABLE ProductFormMeasures IS 'This table records part of the factual description of the product. It corresponds with the tags defined in ONIX 3.0 as P.3.12 to P.3.14.';
COMMENT ON COLUMN ProductFormMeasures.MeasureType IS 'ONIX List 48';
COMMENT ON COLUMN ProductFormMeasures.UnitCode IS 'ONIX List 50';

CREATE TABLE ProductIdentifiers  (
	IdentifierTypeId	integer NOT NULL,
	IDValue         	varchar(256) NOT NULL,
	ProductId       	integer NOT NULL,
	FlagPrimary     	boolean NOT NULL,
	PRIMARY KEY(IdentifierTypeId,IDValue,ProductId)
);
COMMENT ON TABLE ProductIdentifiers IS 'This table registers the different (globally valid) identifiers a product can have. It''s used also to detect products reported by different Origins. It corresponds with ONIX 3.0 tags P.2.1 to P.2.3.
';
COMMENT ON COLUMN ProductIdentifiers.IdentifierTypeId IS 'According to Identifiers Table Pattern on ONIX 3.0 List 5.';

CREATE TABLE ProductIllustrations  (
	ProductId            	integer NOT NULL,
	Illustrated          	char(2) NULL,
	NumberOfIllustrations	integer NULL,
	IllustrationsNote    	varchar(256) NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductIllustrations IS 'This table stores Products Illustration information as specified by ONIX 3.0 tags P.11.5 to P.11.7.';
COMMENT ON COLUMN ProductIllustrations.Illustrated IS 'ONIX List 152';

CREATE TABLE ProductImprints  (
	ProductId        	integer NOT NULL,
	EntryOrder       	integer NOT NULL,
	ImprintId        	integer NOT NULL,
	OriginalImprintId	integer NULL,
	PRIMARY KEY(ProductId,EntryOrder)
);
COMMENT ON TABLE ProductImprints IS 'This table stores the relation between Products and Imprints as indicated by ONIX 3.0 tags P.19.1 to P.19.4';
COMMENT ON COLUMN ProductImprints.OriginalImprintId IS 'The original ImprintId if it was replaced because of the ReplaceWithThisId field was not NULL.';

CREATE TABLE ProductLanguages  (
	ProductId   	integer NOT NULL,
	LanguageRole	char(2) NOT NULL,
	LanguageCode	char(2) NOT NULL,
	CountryCode 	char(2) NULL,
	ScriptCode  	char(4) NULL,
	PRIMARY KEY(ProductId,LanguageRole)
);
COMMENT ON TABLE ProductLanguages IS 'This table stores Product Languages as indicated by ONIX 3.0 tags P.10.1 to P.10.4.';
COMMENT ON COLUMN ProductLanguages.LanguageRole IS 'ONIX List 22';
COMMENT ON COLUMN ProductLanguages.LanguageCode IS 'ONIX List 74 (ISO 639-2/B) converted to ISO 639-1 (2 chars).';
COMMENT ON COLUMN ProductLanguages.CountryCode IS 'ONIX List 91';
COMMENT ON COLUMN ProductLanguages.ScriptCode IS 'ONIX List 121';

CREATE TABLE ProductOriginMessages  (
	ProductId	integer NOT NULL,
	OriginId 	integer NOT NULL,
	MessageId	integer NOT NULL,
	PRIMARY KEY(ProductId,OriginId,MessageId)
);
COMMENT ON TABLE ProductOriginMessages IS 'This table registers in what Interchange Messages the Product was received (or updated/deleted).';

CREATE TABLE ProductPublication  (
	ProductId           	integer NOT NULL,
	CityOfPublication   	varchar(128) NULL,
	CountryOfPublication	char(2) NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductPublication IS 'This table stores Publication info for Products as indicated by ONIX 3.0 tags P.19.13 and P.19.14.';
COMMENT ON COLUMN ProductPublication.CountryOfPublication IS 'ONIX List 91';

CREATE TABLE ProductPublishers  (
	ProductId          	integer NOT NULL,
	EntryOrder         	integer NOT NULL,
	PublisherId        	integer NOT NULL,
	PublishingRole     	char(2) NOT NULL,
	OriginalPublisherId	integer NULL,
	PRIMARY KEY(ProductId,EntryOrder)
);
COMMENT ON TABLE ProductPublishers IS 'This table stores the relation between Products and Publishers as indicated by ONIX 3.0 tags P.19.5 to P.19.9';
COMMENT ON COLUMN ProductPublishers.PublishingRole IS 'ONIX List 45';
COMMENT ON COLUMN ProductPublishers.OriginalPublisherId IS 'The original ImprintId if it was replaced because of the ReplaceWithThisId field was not NULL.';

CREATE TABLE ProductRecordReferences  (
	OriginId         	integer NOT NULL,
	RecordReference  	varchar(256) NOT NULL,
	ProductId        	integer NOT NULL,
	FlagPrimarySource	boolean NOT NULL,
	FlagDeleted      	boolean NOT NULL,
	PRIMARY KEY(OriginId,RecordReference)
);
COMMENT ON TABLE ProductRecordReferences IS 'This table registers the posible Origins for each Product. Only one Origin can be Primary for a Product. The Primary is the product that is put to sale (this is important for pricing and things like that). This mechanism provides for a method to handle the situation when multiple Providers supply the same product. This table stores ONIX 3.0 tag P.1.1.';
COMMENT ON COLUMN ProductRecordReferences.FlagDeleted IS 'Indicates if the Origin has reported the deletion of the Product.';

CREATE TABLE ProductRelatedWorks  (
	ProductId               	integer NOT NULL,
	WorkRelationCode        	char(2) NOT NULL,
	RelatedProductId        	integer NOT NULL,
	OriginalRelatedProductId	integer NULL,
	PRIMARY KEY(ProductId,WorkRelationCode,RelatedProductId)
);
COMMENT ON TABLE ProductRelatedWorks IS 'This table stores the Product Related Works as indicated by ONIX 3.0 tags P.22.';
COMMENT ON COLUMN ProductRelatedWorks.WorkRelationCode IS 'ONIX List 164';
COMMENT ON COLUMN ProductRelatedWorks.OriginalRelatedProductId IS 'The original ProductId if it was replaced because of the ReplaceWithThisId field was not NULL.';

CREATE TABLE ProductSubjects  (
	ProductId        	integer NOT NULL,
	EntryOrder       	integer NOT NULL,
	SubjectId        	integer NOT NULL,
	FlagMainSubject  	boolean NOT NULL,
	OriginalSubjectId	integer NULL,
	PRIMARY KEY(ProductId,EntryOrder)
);
COMMENT ON TABLE ProductSubjects IS 'This table stores the relation between Products and Subjects as specified by ONIX tags P.12.1 to P.12.6.';
COMMENT ON COLUMN ProductSubjects.OriginalSubjectId IS 'The original SubjectId if it was replaced because of the ReplaceWithThisId field was not NULL.';

CREATE TABLE ProductSupplyDetail  (
	ProductId          	integer NOT NULL,
	SupplierRole       	char(2) NOT NULL,
	OriginId           	integer NOT NULL,
	ProductAvailability	char(2) NOT NULL,
	FulfillmentType    	char(2) NULL,
	FulfillmentValue   	integer NULL,
	EmbargoDate        	date NULL,
	FlagUnpriced       	boolean NOT NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductSupplyDetail IS 'This table stores Product Supply Detail as indicated by ONIX 3.0 tags P.26.';
COMMENT ON COLUMN ProductSupplyDetail.SupplierRole IS 'ONIX List 93';
COMMENT ON COLUMN ProductSupplyDetail.OriginId IS 'The supplier of the product (and the id of the one that will handle the Fulfillment)';
COMMENT ON COLUMN ProductSupplyDetail.ProductAvailability IS 'ONIX List 65, only "10" (Not Yet Available), "21" (In Stock) and "22" (To Order) are supported.';
COMMENT ON COLUMN ProductSupplyDetail.FulfillmentType IS 'Unit type for the Value. "01" for hours, "02" for days or "03" for weeks. Not an ONIX List. Only indicated for ProductAvailability "21" (On Stock) or "22" (To Order), but are specified in different ONIX tags.';
COMMENT ON COLUMN ProductSupplyDetail.FulfillmentValue IS 'Can be hours, days or weeks, depending on FulfillmetType. Only indicated for ProductAvailability "21" (On Stock) or "22" (To Order), but are specified in different ONIX tags.';
COMMENT ON COLUMN ProductSupplyDetail.EmbargoDate IS 'Sólo se soporta el formato YYYY-MM-DD';

CREATE TABLE ProductSupplyDetailPrice  (
	ProductId     	integer NOT NULL,
	PriceType     	char(2) NULL,
	PriceQualifier	char(2) NULL,
	PricePer      	char(2) NULL,
	PriceStatus   	char(2) NULL,
	PriceAmount   	numeric(12,2) NOT NULL,
	CurrencyCode  	char(3) NOT NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductSupplyDetailPrice IS 'This table stores Product Supply Detail Price as indicated by ONIX 3.0 tags P.26.';
COMMENT ON COLUMN ProductSupplyDetailPrice.PriceType IS 'ONIX List 58';
COMMENT ON COLUMN ProductSupplyDetailPrice.PriceQualifier IS 'ONIX List 59';
COMMENT ON COLUMN ProductSupplyDetailPrice.PricePer IS 'ONIX List 60';
COMMENT ON COLUMN ProductSupplyDetailPrice.PriceStatus IS 'ONIX List 61';
COMMENT ON COLUMN ProductSupplyDetailPrice.CurrencyCode IS 'ONIX List 96';

CREATE TABLE ProductSupplyMarket  (
	ProductId              	integer NOT NULL,
	CountriesIncluded      	varchar(768) NULL,
	RegionsIncluded        	varchar(128) NULL,
	CountriesExcluded      	varchar(768) NULL,
	RegionsExcluded        	varchar(128) NULL,
	FlagFixed              	boolean NOT NULL,
	ShadowCountriesIncluded	varchar(768) NULL,
	ShadowRegionsIncluded  	varchar(128) NULL,
	ShadowCountriesExcluded	varchar(768) NULL,
	ShadowRegionsExcluded  	varchar(128) NULL,
	SalesRestrictionType   	char(2) NULL,
	StartDateFormat        	char(2) NULL,
	StartDate              	date NULL,
	EndDateFormat          	char(2) NULL,
	EndDate                	date NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductSupplyMarket IS 'This table stores the Product Supply Market as indicated by ONIX 3.0 tags P.24.1 to P.24.12.
IMPORTANT: there are repetability limitations in this implementation.';
COMMENT ON COLUMN ProductSupplyMarket.CountriesIncluded IS 'ONIX List 91';
COMMENT ON COLUMN ProductSupplyMarket.RegionsIncluded IS 'ONIX List 49';
COMMENT ON COLUMN ProductSupplyMarket.CountriesExcluded IS 'ONIX List 91';
COMMENT ON COLUMN ProductSupplyMarket.RegionsExcluded IS 'ONIX List 49';

CREATE TABLE ProductSupplyPublishingDetail  (
	ProductId                 	integer NOT NULL,
	MarketPublishingStatus    	char(2) NOT NULL,
	MarketPublishingStatusNote	varchar(512) NULL,
	FlagNovelty               	boolean NOT NULL,
	InitialPrintRun           	varchar(256) NULL,
	ReprintDetail             	varchar(256) NULL,
	CopiesSold                	varchar(256) NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE ProductSupplyPublishingDetail IS 'This table stores the Product Market Publishing Detail as indicated by ONIX 3.0 tags P.25.1 to P.25.22.';
COMMENT ON COLUMN ProductSupplyPublishingDetail.MarketPublishingStatus IS 'ONIX List 68';
COMMENT ON COLUMN ProductSupplyPublishingDetail.FlagNovelty IS 'This flag indicates the product is new (less than N days, so sales must be boost). If diff(NOW, Products.CreationDate) < x days, the value is true, false otherwise.';

CREATE TABLE ProductSupplyPublishingDetailDates  (
	ProductId       	integer NOT NULL,
	DateRole        	char(2) NOT NULL,
	DateFormat      	char(2) NOT NULL,
	DateValue       	date NOT NULL,
	FlagFixed       	boolean NOT NULL,
	ShadowDateFormat	char(2) NOT NULL,
	ShadowDateValue 	date NOT NULL,
	PRIMARY KEY(ProductId,DateRole)
);
COMMENT ON TABLE ProductSupplyPublishingDetailDates IS 'This table stores Product Publishing Detail Dates as indicated by ONIX 3.0 tags P.25.14 to P.25.16.';
COMMENT ON COLUMN ProductSupplyPublishingDetailDates.DateRole IS 'ONIX List 163';
COMMENT ON COLUMN ProductSupplyPublishingDetailDates.DateFormat IS 'ONIX List 55';
COMMENT ON COLUMN ProductSupplyPublishingDetailDates.ShadowDateFormat IS 'ONIX List 55';

CREATE TABLE ProductTitleElements  (
	ProductId         	integer NOT NULL,
	TitleType         	char(2) NOT NULL,
	EntryOrder        	integer NOT NULL,
	LanguageCode      	char(2) NOT NULL,
	TitleElementLevel 	char(2) NOT NULL,
	PartNumber        	varchar(64) NULL,
	YearOfAnnual      	varchar(64) NULL,
	TitleText         	varchar(512) NULL,
	TitlePrefix       	varchar(64) NULL,
	TitleWithoutPrefix	varchar(512) NULL,
	Subtitle          	varchar(512) NULL,
	PRIMARY KEY(ProductId,TitleType,EntryOrder)
);
COMMENT ON TABLE ProductTitleElements IS 'This table describes titles for the Product entities. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX tags P.6.2 to P.6.8.';
COMMENT ON COLUMN ProductTitleElements.EntryOrder IS 'Sequential number assigned to each element informed by Onix.';
COMMENT ON COLUMN ProductTitleElements.TitleElementLevel IS 'ONIX List 149';

CREATE TABLE ProductTitles  (
	ProductId            	integer NOT NULL,
	TitleType            	char(2) NOT NULL,
	EffectiveLanguageCode	char(2) NOT NULL,
	EffectiveTitle       	varchar(1024) NOT NULL,
	FlagFixed            	boolean NOT NULL,
	ShadowLanguageCode   	char(2) NOT NULL,
	ShadowTitle          	varchar(1024) NOT NULL,
	PRIMARY KEY(ProductId,TitleType)
);
COMMENT ON TABLE ProductTitles IS 'This table describes titles for the Product entities. It is self-populated as a result of ONIX 3.0 file processing, but it can also be manually created and maintained. When auto-generated, the data comes from ONIX tag P.6.';
COMMENT ON COLUMN ProductTitles.TitleType IS 'ONIX List 15';
COMMENT ON COLUMN ProductTitles.EffectiveLanguageCode IS 'This field is taken from the language attribute of the title elements (if present) or inherited from the product default. ONIX List 74 (ISO 639-2/B) converted to ISO 639-1 (2 chars).';
COMMENT ON COLUMN ProductTitles.EffectiveTitle IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated with the CollectionTitleElements. The goal of the field is to have an easy to access full title.';
COMMENT ON COLUMN ProductTitles.FlagFixed IS 'When this field is true, then the EffectiveTitle is set by the end user and must not be changed or recalculated.';

CREATE TABLE Products  (
	ProductId        	integer NOT NULL,
	LanguageCode     	char(2) NOT NULL,
	ReplaceWithThisId	integer NULL,
	FlagInvisible    	boolean NOT NULL,
	FlagDeleted      	boolean NOT NULL,
	CreationDate     	timestamp NOT NULL,
	LastUpdateDate   	timestamp NULL,
	DeletionDate     	timestamp NULL,
	PRIMARY KEY(ProductId)
);
COMMENT ON TABLE Products IS 'This table stores the list of products.';
COMMENT ON COLUMN Products.LanguageCode IS 'Primary language of the work (ISO 639-1). If it is not specified (in titles and such, the default of the message is used).';
COMMENT ON COLUMN Products.ReplaceWithThisId IS 'If this field has a value, then this ProductId must be replaced with the stated value. This is useful to data curation from different providers.';
COMMENT ON COLUMN Products.FlagDeleted IS 'Indicates all Origins have deleted the product.';

CREATE TABLE PublisherIdentifiers  (
	IdentifierTypeId	integer NOT NULL,
	IDValue         	varchar(256) NOT NULL,
	PublisherId     	integer NOT NULL,
	FlagPrimary     	boolean NOT NULL,
	PRIMARY KEY(IdentifierTypeId,IDValue)
);
COMMENT ON TABLE PublisherIdentifiers IS 'This table describes the Ids for Publisher entities. It is self-populated by fields P.19.6 to P.19.8 as a result of ONIX 3.0 file processing.';
COMMENT ON COLUMN PublisherIdentifiers.IdentifierTypeId IS 'According to Identifiers Table Pattern on ONIX 3.0 List 44.';

CREATE TABLE PublisherWebsites  (
	PublisherId       	integer NOT NULL,
	WebsiteRole       	char(2) NOT NULL,
	WebsiteLink       	varchar(512) NOT NULL,
	WebsiteDescription	varchar(512) NULL,
	FlagFixed         	boolean NOT NULL,
	ShadowLink        	varchar(512) NOT NULL,
	ShadowDescription 	varchar(512) NULL,
	PRIMARY KEY(PublisherId,WebsiteRole)
);
COMMENT ON TABLE PublisherWebsites IS 'This table stores Publisher Websites as indicated by ONIX 3.0 tags P.19.10 to P.19.12.';
COMMENT ON COLUMN PublisherWebsites.WebsiteRole IS 'ONIX List 73';

CREATE TABLE Publishers  (
	PublisherId      	integer NOT NULL,
	Name             	varchar(256) NOT NULL,
	FlagFixed        	boolean NOT NULL,
	ShadowName       	varchar(256) NOT NULL,
	ReplaceWithThisId	integer NULL,
	FlagInvisible    	boolean NOT NULL,
	FlagDeleted      	boolean NOT NULL,
	CreationDate     	timestamp NOT NULL,
	LastUpdateDate   	timestamp NULL,
	DeletionDate     	timestamp NULL,
	PRIMARY KEY(PublisherId)
);
COMMENT ON TABLE Publishers IS 'This table stores Publisher information as indicated by ONIX 3.0 tags P.19.9.';
COMMENT ON COLUMN Publishers.Name IS 'if FlagFixed is true, then this field is set by the user. If FlagFixed is false, this field IS NOT EDITABLE and it''s autogenerated from the ShadowName field. The goal of the field is to have an easy to access full name.';
COMMENT ON COLUMN Publishers.FlagFixed IS 'When this field is true, then the EffectiveName is set by the end user and must not be changed or recalculated.';
COMMENT ON COLUMN Publishers.ReplaceWithThisId IS 'If this field has a value, then this ImprintId must be replaced with the stated value. This is useful to data curation from different providers.';

CREATE TABLE StoreDesignRepositories  (
	StoreId    	integer NOT NULL,
	DesignId   	integer NOT NULL,
	LogicalName	varchar(64) NOT NULL,
	AWSBucket  	varchar(256) NOT NULL,
	PRIMARY KEY(StoreId,DesignId,LogicalName)
);
COMMENT ON TABLE StoreDesignRepositories IS 'This table registers the logical/physical repositories for a Store/Design pair. The AWSBucket is expected to be unique, but is not enforced at the DB level.

The table also registers fully global repositories (StoreId = -1, DesignId = -1) and Store Global repositories (StoreId = {{store}}, DesignId = -1).';

CREATE TABLE StoreDesigns  (
	StoreId             	integer NOT NULL,
	DesignId            	integer NOT NULL,
	InheritsFromStoreId 	integer NULL,
	InheritsFromDesignId	integer NULL,
	HashedId            	varchar(32) NOT NULL,
	PercentageOnline    	numeric(5,2) NOT NULL,
	PRIMARY KEY(StoreId,DesignId)
);
COMMENT ON TABLE StoreDesigns IS 'This table registers an instance of a Store/Design pair. A Design can be used by more than one store. At any given time, the sums of the PercentageOnline for a Store must be 100.';

CREATE TABLE StoreDomains  (
	StoreId          	integer NOT NULL,
	DomainName       	varchar(256) NOT NULL,
	ContentDomainName	varchar(256) NOT NULL,
	StaticDomainName 	varchar(256) NOT NULL,
	PaymentDomainName	varchar(256) NOT NULL,
	SecureDomainName 	varchar(256) NOT NULL,
	DynamicDomainName	varchar(256) NOT NULL,
	SearchDomainName 	varchar(256) NOT NULL,
	FlagPrimary      	boolean NOT NULL,
	PRIMARY KEY(StoreId,DomainName)
);
COMMENT ON TABLE StoreDomains IS 'This table registers what domains are used with each store. Each field will be associated with a "logical" name (ex: ContentDomainName will be "content", etc).';
COMMENT ON COLUMN StoreDomains.DomainName IS 'The domain name, without any subdomains (i.e: tematika.com).';
COMMENT ON COLUMN StoreDomains.ContentDomainName IS 'The domain name where content for the Store will reside (i.e: home page, pages for products, etc)';
COMMENT ON COLUMN StoreDomains.StaticDomainName IS 'Domain name for globaly static content (i.e: the product images, prices, etc)';
COMMENT ON COLUMN StoreDomains.PaymentDomainName IS 'The domain name for payment related pages (checkout, credit card info, etc).';
COMMENT ON COLUMN StoreDomains.DynamicDomainName IS 'Domain name for dynamic services (i.e: login, search, personal information, etc)';

CREATE TABLE Stores  (
	StoreId                       	integer NOT NULL,
	Name                          	varchar(64) NOT NULL,
	DefaultMarketCountriesIncluded	varchar(768) NULL,
	DefaultMarketRegionsIncluded  	varchar(128) NULL,
	DefaultCurrencyCode           	char(3) NOT NULL,
	ArbitrationCurrencyCode       	char(3) NOT NULL,
	DefautCountryCode             	char(2) NOT NULL,
	DefaultLanguageCode           	char(2) NOT NULL,
	StoreStaticFilesPath          	varchar(512) NOT NULL,
	HashedId                      	varchar(32) NOT NULL,
	FlagDeleted                   	boolean NOT NULL,
	CreationDate                  	timestamp NOT NULL,
	LastUpdateDate                	timestamp NULL,
	DeletionDate                  	timestamp NULL,
	PRIMARY KEY(StoreId)
);
COMMENT ON TABLE Stores IS 'This table registers the defined stores.';
COMMENT ON COLUMN Stores.DefaultCurrencyCode IS 'The default currency for the store (if not stated, prices are stated in this currency.';
COMMENT ON COLUMN Stores.DefautCountryCode IS 'ISO 3166-1.';
COMMENT ON COLUMN Stores.StoreStaticFilesPath IS 'This field points to a directory in a single repository (AWS S3) where the static files (logos, css, etc) for the Store reside.';

CREATE TABLE SubjectIdentifiers  (
	IdentifierTypeId	integer NOT NULL,
	IDValue         	varchar(256) NOT NULL,
	SubjectId       	integer NOT NULL,
	FlagPrimary     	boolean NOT NULL,
	SchemeVersion   	varchar(16) NULL,
	PRIMARY KEY(IdentifierTypeId,IDValue)
);
COMMENT ON TABLE SubjectIdentifiers IS 'This table describes the Ids for Subject entities. It is self-populated by fields P.12.2 to P.12.5 as a result of ONIX 3.0 file processing.';
COMMENT ON COLUMN SubjectIdentifiers.IdentifierTypeId IS 'According to Identifiers Table Pattern on ONIX 3.0 List 27.';

CREATE TABLE Subjects  (
	SubjectId        	integer NOT NULL,
	Title            	varchar(256) NOT NULL,
	FlagFixed        	boolean NOT NULL,
	ShadowTitle      	varchar(256) NOT NULL,
	ReplaceWithThisId	integer NULL,
	FlagInvisible    	boolean NOT NULL,
	FlagDeleted      	boolean NOT NULL,
	CreationDate     	timestamp NOT NULL,
	LastUpdateDate   	timestamp NULL,
	DeletionDate     	timestamp NULL,
	PRIMARY KEY(SubjectId)
);
COMMENT ON TABLE Subjects IS 'This table stores the Subject entities as implied by ONIX 3.0 tags P.12.2 to P.12.6. This entities are auto-generated from the Product references when needed.';
COMMENT ON COLUMN Subjects.FlagFixed IS 'When this field is true, then the ShadowTitle is set by the end user and must not be changed or recalculated.';
COMMENT ON COLUMN Subjects.ReplaceWithThisId IS 'If this field has a value, then this SubjectId must be replaced with the stated value. This is useful to data curation from different providers.';

CREATE TABLE URLPatterns  (
	PatternId     	integer NOT NULL,
	Name          	varchar(256) NOT NULL,
	PatternType   	char(2) NOT NULL,
	LinkPattern   	varchar(512) NOT NULL,
	Description   	varchar(512) NOT NULL,
	FlagDeleted   	boolean NOT NULL,
	CreationDate  	timestamp NOT NULL,
	LastUpdateDate	timestamp NULL,
	DeletionDate  	timestamp NULL,
	PRIMARY KEY(PatternId)
);
COMMENT ON TABLE URLPatterns IS 'List of URL Patterns. Patterns can be assigned to different Entity Types.';

CREATE TABLE URLPublishedStatus  (
	URLId          	integer NOT NULL,
	StoreId        	integer NOT NULL,
	DesignId       	integer NOT NULL,
	PublishedStatus	char(2) NOT NULL,
	LastUpdateDate 	timestamp NOT NULL,
	PRIMARY KEY(URLId,StoreId,DesignId)
);
COMMENT ON TABLE URLPublishedStatus IS 'This table indicates what URLs are published in what Store/Designs.';

CREATE TABLE URLs  (
	URLId          	integer NOT NULL,
	LinkBase       	varchar(1024) NOT NULL,
	SourcePatternId	integer NOT NULL,
	FlagDeleted    	boolean NOT NULL,
	CreationDate   	timestamp NOT NULL,
	LastUpdateDate 	timestamp NULL,
	DeletionDate   	timestamp NULL,
	PRIMARY KEY(URLId)
);
COMMENT ON TABLE URLs IS 'This table stores the list of all published URLs. By URLs we mean the base of the URL group. For example, a Product has a base URL and then URLs for the images, JSON data, etc. That base is what is registered here.';

CREATE TABLE UserCredentials  (
	UserId               	integer NOT NULL,
	CredentialId         	integer NOT NULL,
	CredentialType       	char(2) NOT NULL,
	CredentialLoginName  	varchar(256) NOT NULL,
	CredentialLoginSecret	varchar(512) NOT NULL,
	FlagEnabled          	boolean NOT NULL,
	CreationDate         	timestamp NOT NULL,
	LastUpdateDate       	timestamp NULL,
	DeletionDate         	timestamp NULL,
	PRIMARY KEY(UserId,CredentialId)
);
COMMENT ON TABLE UserCredentials IS 'This table stores Users Credentials (a user can have credentials for multiple systems).';
COMMENT ON COLUMN UserCredentials.CredentialLoginName IS 'The user name, user id, email, etc of this specific credential.';
COMMENT ON COLUMN UserCredentials.CredentialLoginSecret IS 'The password, secret hash, etc for this credential.';

CREATE TABLE UserName  (
	UserId           	integer NOT NULL,
	FirstNames       	varchar(256) NULL,
	LastNames        	varchar(256) NULL,
	FlagCompany      	boolean NOT NULL,
	NickName         	varchar(128) NULL,
	Sex              	char(1) NULL,
	IdType           	char(4) NULL,
	IdNumber         	varchar(32) NULL,
	BirthDate        	date NULL,
	CountryOFBirth   	char(2) NULL,
	CoutryOfResidence	varchar(25) NULL,
	PRIMARY KEY(UserId)
);
COMMENT ON TABLE UserName IS 'This table stores the User''s Name and personal data.';
COMMENT ON COLUMN UserName.FlagCompany IS 'If this flag is true, then the Company Name is in LastNames';
COMMENT ON COLUMN UserName.IdType IS 'The Type of User Id (ex: DNI, LC, CUIT, Passport, etc)';
COMMENT ON COLUMN UserName.IdNumber IS 'The unique ID of the user (ex: DNI number, CUIT, Passport, etc)';

CREATE TABLE UserRecordReferences  (
	OriginId     	integer NOT NULL,
	UserReference	varchar(256) NOT NULL,
	UserId       	integer NOT NULL,
	FlagDeleted  	boolean NOT NULL,
	PRIMARY KEY(OriginId,UserReference)
);
COMMENT ON TABLE UserRecordReferences IS 'This table describes the Ids for User Entities. It is self-populated at fulfillment with a target User Id (if needed).';

CREATE TABLE Users  (
	UserId           	integer NOT NULL,
	HashedId         	varchar(32) NOT NULL,
	PreferredLanguage	char(2) NOT NULL,
	ReplaceWithThisId	integer NULL,
	FlagInvisible    	boolean NOT NULL,
	FlagDeleted      	boolean NOT NULL,
	CreationDate     	timestamp NOT NULL,
	LastUpdateDate   	timestamp NULL,
	DeletionDate     	timestamp NULL,
	PRIMARY KEY(UserId)
);
COMMENT ON TABLE Users IS 'This table stores the Users of the system.';
COMMENT ON COLUMN Users.HashedId IS 'Stores a hashed id that can be exposed without revealing a sequence number.';

ALTER TABLE CodeTablesONIX30Char2
	ADD CONSTRAINT FK_CodeTables_CodeTablesONIX30Char2
	FOREIGN KEY(CodeTableId)
	REFERENCES CodeTables(CodeTableId);

ALTER TABLE CodeTablesONIX30Char3
	ADD CONSTRAINT FK_CodeTables_CodeTablesONIX30Char3
	FOREIGN KEY(CodeTableId)
	REFERENCES CodeTables(CodeTableId);

ALTER TABLE CodeTablesONIX30Char4
	ADD CONSTRAINT FK_CodeTables_CodeTablesONIX30Char4
	FOREIGN KEY(CodeTableId)
	REFERENCES CodeTables(CodeTableId);

ALTER TABLE CodeTablesONIX30Char1
	ADD CONSTRAINT FK_CodeTables_CodeTablesONIX30Char1
	FOREIGN KEY(CodeTableId)
	REFERENCES CodeTables(CodeTableId);

ALTER TABLE IdentifierTypes
	ADD CONSTRAINT FK_CodeTables_IdentifierTypes
	FOREIGN KEY(CodeTableId)
	REFERENCES CodeTables(CodeTableId);

ALTER TABLE CodeTablesONIX30Char1Language
	ADD CONSTRAINT FK_CodeTablesONIX30Char1_CodeTablesONIX30Char1Language
	FOREIGN KEY(CodeTableId, CodeValue)
	REFERENCES CodeTablesONIX30Char1(CodeTableId, CodeValue);

ALTER TABLE CodeTablesONIX30Char2Language
	ADD CONSTRAINT FK_CodeTablesONIX30Char2_CodeTablesONIX30Char2Language
	FOREIGN KEY(CodeTableId, CodeValue)
	REFERENCES CodeTablesONIX30Char2(CodeTableId, CodeValue);

ALTER TABLE CodeTablesONIX30Char3Language
	ADD CONSTRAINT FK_CodeTablesONIX30Char3_CodeTablesONIX30Char3Language
	FOREIGN KEY(CodeTableId, CodeValue)
	REFERENCES CodeTablesONIX30Char3(CodeTableId, CodeValue);

ALTER TABLE CodeTablesONIX30Char4Language
	ADD CONSTRAINT FK_CodeTablesONIX30Char4_CodeTablesONIX30Char4Language
	FOREIGN KEY(CodeTableId, CodeValue)
	REFERENCES CodeTablesONIX30Char4(CodeTableId, CodeValue);

ALTER TABLE CodeTablesRegionLanguage
	ADD CONSTRAINT FK_CodeTablesRegion_CodeTablesRegionLanguage
	FOREIGN KEY(CodeValue)
	REFERENCES CodeTablesRegion(CodeValue);

ALTER TABLE CollectionTitleElements
	ADD CONSTRAINT FK_CollectionTitles_CollectionTitleElements
	FOREIGN KEY(CollectionId, TitleType)
	REFERENCES CollectionTitles(CollectionId, TitleType);

ALTER TABLE CollectionIdentifiers
	ADD CONSTRAINT FK_Collections_CollectionIdentifiers
	FOREIGN KEY(CollectionId)
	REFERENCES Collections(CollectionId);

ALTER TABLE CollectionTitles
	ADD CONSTRAINT FK_Collections_CollectionTitles
	FOREIGN KEY(CollectionId)
	REFERENCES Collections(CollectionId);

ALTER TABLE ProductCollections
	ADD CONSTRAINT FK_Collections_ProductCollections
	FOREIGN KEY(CollectionId)
	REFERENCES Collections(CollectionId);

ALTER TABLE ContributorIdentifiers
	ADD CONSTRAINT FK_Contributors_ContributorIdentifiers
	FOREIGN KEY(ContributorId)
	REFERENCES Contributors(ContributorId);

ALTER TABLE ContributorDates
	ADD CONSTRAINT FK_Contributors_ContributorDates
	FOREIGN KEY(ContributorId)
	REFERENCES Contributors(ContributorId);

ALTER TABLE ContributorWebsites
	ADD CONSTRAINT FK_Contributors_ContributorWebsites
	FOREIGN KEY(ContributorId)
	REFERENCES Contributors(ContributorId);

ALTER TABLE ProductContributors
	ADD CONSTRAINT FK_Contributors_ProductContributors
	FOREIGN KEY(ContributorId)
	REFERENCES Contributors(ContributorId);

ALTER TABLE ContributorPlaces
	ADD CONSTRAINT FK_Contributors_ContributorPlaces
	FOREIGN KEY(ContributorId)
	REFERENCES Contributors(ContributorId);

ALTER TABLE ProductContentContributors
	ADD CONSTRAINT FK_Contributors_ProductContentContributors
	FOREIGN KEY(ContributorId)
	REFERENCES Contributors(ContributorId);

ALTER TABLE DesignDocumentHeaders
	ADD CONSTRAINT FK_DesignDocuments_DesignDocumentHeaders
	FOREIGN KEY(DesignId, EntityType, EntityId, DocumentId)
	REFERENCES DesignDocuments(DesignId, EntityType, EntityId, DocumentId);

ALTER TABLE StoreDesigns
	ADD CONSTRAINT FK_Designs_StoreDesigns
	FOREIGN KEY(DesignId)
	REFERENCES Designs(DesignId);

ALTER TABLE DesignURLGenerators
	ADD CONSTRAINT FK_Designs_DesignURLGenerators
	FOREIGN KEY(DesignId)
	REFERENCES Designs(DesignId);

ALTER TABLE DesignDocuments
	ADD CONSTRAINT FK_Designs_DesignDocuments
	FOREIGN KEY(DesignId)
	REFERENCES Designs(DesignId);

ALTER TABLE EntityURLs
	ADD CONSTRAINT FK_Entities_EntitiesURLs
	FOREIGN KEY(EntityType, EntityId)
	REFERENCES Entities(EntityType, EntityId);

ALTER TABLE EntityTexts
	ADD CONSTRAINT FK_Entities_EntityTexts
	FOREIGN KEY(EntityType, EntityId)
	REFERENCES Entities(EntityType, EntityId);

ALTER TABLE EntityResources
	ADD CONSTRAINT FK_Entities_EntityResources
	FOREIGN KEY(EntityType, EntityId)
	REFERENCES Entities(EntityType, EntityId);

ALTER TABLE EntityRelatedEntities
	ADD CONSTRAINT FK_Entities_EntityRelatedEntities_Source
	FOREIGN KEY(EntityType, EntityId)
	REFERENCES Entities(EntityType, EntityId);

ALTER TABLE EntityRelatedEntities
	ADD CONSTRAINT FK_Entities_EntityRelatedEntities_Dest
	FOREIGN KEY(RelatedEntityType, RelatedEntityId)
	REFERENCES Entities(EntityType, EntityId);

ALTER TABLE EntitySnapshotRatings
	ADD CONSTRAINT FK_Entities_EntitySnapshotRatings
	FOREIGN KEY(EntityType, EntityId)
	REFERENCES Entities(EntityType, EntityId);

ALTER TABLE EntityRatings
	ADD CONSTRAINT FK_Entities_EntityRatings
	FOREIGN KEY(EntityType, EntityId)
	REFERENCES Entities(EntityType, EntityId);

ALTER TABLE EntityResourceAudiences
	ADD CONSTRAINT FK_EntityResources_EntityResourceAudiences
	FOREIGN KEY(EntityType, EntityId, ContentType, EntryId)
	REFERENCES EntityResources(EntityType, EntityId, ContentType, EntryId);

ALTER TABLE EntityResourceFeatures
	ADD CONSTRAINT FK_EntityResources_EntityResourceFeatures
	FOREIGN KEY(EntityType, EntityId, ContentType, EntryId)
	REFERENCES EntityResources(EntityType, EntityId, ContentType, EntryId);

ALTER TABLE EntityTextAudiences
	ADD CONSTRAINT FK_EntityTexts_EntityTextAudiences
	FOREIGN KEY(EntityType, EntityId, EntryCode, EntryId)
	REFERENCES EntityTexts(EntityType, EntityId, EntryCode, EntryId);

ALTER TABLE EntityTextDates
	ADD CONSTRAINT FK_EntityTexts_EntityTextDates
	FOREIGN KEY(EntityType, EntityId, EntryCode, EntryId)
	REFERENCES EntityTexts(EntityType, EntityId, EntryCode, EntryId);

ALTER TABLE EntityTypeURLPatternSelectors
	ADD CONSTRAINT FK_EntityTypeURLPatterns_EntityTypeURLPatternSelectors
	FOREIGN KEY(EntityType, PatternId)
	REFERENCES EntityTypeURLPatterns(EntityType, PatternId);

ALTER TABLE Entities
	ADD CONSTRAINT FK_EntityTypes_Entities
	FOREIGN KEY(EntityType)
	REFERENCES EntityTypes(EntityType);

ALTER TABLE EntityTypeURLPatterns
	ADD CONSTRAINT FK_EntityTypes_EntityTypeURLPatterns
	FOREIGN KEY(EntityType)
	REFERENCES EntityTypes(EntityType);

ALTER TABLE ImprintIdentifiers
	ADD CONSTRAINT FK_Imprints_ImprintIdentifiers
	FOREIGN KEY(ImprintId)
	REFERENCES Imprints(ImprintId);

ALTER TABLE ProductImprints
	ADD CONSTRAINT FK_Imprints_ProductImprints
	FOREIGN KEY(ImprintId)
	REFERENCES Imprints(ImprintId);

ALTER TABLE Origins
	ADD CONSTRAINT FK_InterchangeTypes_Origins
	FOREIGN KEY(InterchangeType)
	REFERENCES InterchangeTypes(InterchangeType);

ALTER TABLE MessageStatus
	ADD CONSTRAINT FK_TypesInterchange_MessageStatus
	FOREIGN KEY(TypeInterchange)
	REFERENCES InterchangeTypes(InterchangeType);

ALTER TABLE OriginMessages
	ADD CONSTRAINT FK_MessageStatus_OriginMessages
	FOREIGN KEY(TypeInterchange, MessageStatus)
	REFERENCES MessageStatus(TypeInterchange, MessageStatus);

ALTER TABLE ProductOriginMessages
	ADD CONSTRAINT FK_OriginMessages_ProductOriginMessages
	FOREIGN KEY(OriginId, MessageId)
	REFERENCES OriginMessages(OriginId, IdMessage);

ALTER TABLE ProductRecordReferences
	ADD CONSTRAINT FK_Origins_ProductRecordReferences
	FOREIGN KEY(OriginId)
	REFERENCES Origins(OriginId);

ALTER TABLE OriginMessages
	ADD CONSTRAINT FK_Origins_OriginMessages
	FOREIGN KEY(OriginId)
	REFERENCES Origins(OriginId);

ALTER TABLE PageURLs
	ADD CONSTRAINT FK_Pages_PageURLs
	FOREIGN KEY(PageId)
	REFERENCES Pages(PageId);

ALTER TABLE ProductContentTitleElements
	ADD CONSTRAINT FK_ProductContentTitles_ProductContentTitleElements
	FOREIGN KEY(ProductId, EntryOrder, TitleType)
	REFERENCES ProductContentTitles(ProductId, EntryOrder, TitleType);

ALTER TABLE ProductContentContributors
	ADD CONSTRAINT FK_ProductContents_ProductContentContributors
	FOREIGN KEY(ProductId, EntryOrder)
	REFERENCES ProductContents(ProductId, EntryOrder);

ALTER TABLE ProductContentTitles
	ADD CONSTRAINT FK_ProductContents_ProductContentTitles
	FOREIGN KEY(ProductId, EntryOrder)
	REFERENCES ProductContents(ProductId, EntryOrder);

ALTER TABLE ProductFormEpubTechnicalProtections
	ADD CONSTRAINT FK_ProductForms_ProductFormEPubTechnichalProtections
	FOREIGN KEY(ProductId)
	REFERENCES ProductForm(ProductId);

ALTER TABLE ProductFormFeatures
	ADD CONSTRAINT FK_ProductForms_ProductFormFeatures
	FOREIGN KEY(ProductId)
	REFERENCES ProductForm(ProductId);

ALTER TABLE ProductFormContentTypes
	ADD CONSTRAINT FK_ProductForms_ProductFormContentTypes
	FOREIGN KEY(ProductId)
	REFERENCES ProductForm(ProductId);

ALTER TABLE ProductFormMeasures
	ADD CONSTRAINT FK_ProductForms_ProductFormMeasures
	FOREIGN KEY(ProductId)
	REFERENCES ProductForm(ProductId);

ALTER TABLE ProductFormEpubUsageConstraints
	ADD CONSTRAINT FK_ProductForms_ProductFormEpubUsageConstraints
	FOREIGN KEY(ProductId)
	REFERENCES ProductForm(ProductId);

ALTER TABLE ProductFormEpubUsageConstraintLimits
	ADD CONSTRAINT FK_ProductFormEPubUsageContstraint_ProductFormEPubUsageContstraintLimits
	FOREIGN KEY(ProductId, EntryOrder)
	REFERENCES ProductFormEpubUsageConstraints(ProductId, EntryOrder);

ALTER TABLE ProductSupplyDetailPrice
	ADD CONSTRAINT FK_ProductSupplyDetail_ProductSupplyDetailPrice
	FOREIGN KEY(ProductId)
	REFERENCES ProductSupplyDetail(ProductId);

ALTER TABLE ProductSupplyPublishingDetailDates
	ADD CONSTRAINT FK_ProductSupplyPublishingDetail_ProductSupplyPublishingDetailDates
	FOREIGN KEY(ProductId)
	REFERENCES ProductSupplyPublishingDetail(ProductId);

ALTER TABLE ProductTitleElements
	ADD CONSTRAINT FK_ProductTitles_ProductTitleElements
	FOREIGN KEY(ProductId, TitleType)
	REFERENCES ProductTitles(ProductId, TitleType);

ALTER TABLE ProductRecordReferences
	ADD CONSTRAINT FK_Products_ProductRecordReferences
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductIdentifiers
	ADD CONSTRAINT FK_Products_ProductIdentifiers
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductForm
	ADD CONSTRAINT FK_Products_ProductForm
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductCollections
	ADD CONSTRAINT FK_Products_ProductCollections
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductTitles
	ADD CONSTRAINT FK_Products_ProductTitles
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductContributors
	ADD CONSTRAINT FK_Products_ProductContributors
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductEditions
	ADD CONSTRAINT FK_Products_ProductEditions
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductLanguages
	ADD CONSTRAINT FK_Products_ProductLanguages
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductIllustrations
	ADD CONSTRAINT FK_Products_ProductsIllustrations
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductExtents
	ADD CONSTRAINT FK_Products_ProductsExtents
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductSubjects
	ADD CONSTRAINT FK_Products_ProductSubjects
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductAudiences
	ADD CONSTRAINT FK_Products_ProductAudiences
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductAudienceRanges
	ADD CONSTRAINT FK_Products_ProductAudienceRanges
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductContents
	ADD CONSTRAINT FK_Products_ProductContents
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductImprints
	ADD CONSTRAINT FK_Products_ProductImprints
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductPublishers
	ADD CONSTRAINT FK_Products_ProductPublishers
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductPublication
	ADD CONSTRAINT FK_Products_ProductPublication
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductRelatedWorks
	ADD CONSTRAINT FK_Products_ProductRelatedWorks_Source
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductSupplyMarket
	ADD CONSTRAINT FK_Products_ProductSupplyMarket
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductSupplyPublishingDetail
	ADD CONSTRAINT FK_Products_ProductSupplyPublishingDetail
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductSupplyDetail
	ADD CONSTRAINT FK_Products_ProductSupplyDetail
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductRelatedWorks
	ADD CONSTRAINT FK_Products_ProductRelatedWorks_Dest
	FOREIGN KEY(RelatedProductId)
	REFERENCES Products(ProductId);

ALTER TABLE ProductOriginMessages
	ADD CONSTRAINT FK_Products_ProductOriginMessages
	FOREIGN KEY(ProductId)
	REFERENCES Products(ProductId);

ALTER TABLE PublisherIdentifiers
	ADD CONSTRAINT FK_Publishers_PublisherIdentifiers
	FOREIGN KEY(PublisherId)
	REFERENCES Publishers(PublisherId);

ALTER TABLE ProductPublishers
	ADD CONSTRAINT FK_Publishers_ProductPublishers
	FOREIGN KEY(PublisherId)
	REFERENCES Publishers(PublisherId);

ALTER TABLE PublisherWebsites
	ADD CONSTRAINT FK_Publishers_PublisherWebsites
	FOREIGN KEY(PublisherId)
	REFERENCES Publishers(PublisherId);

ALTER TABLE URLPublishedStatus
	ADD CONSTRAINT FK_StoreDesigns_URLPublishedStatus
	FOREIGN KEY(StoreId, DesignId)
	REFERENCES StoreDesigns(StoreId, DesignId);

ALTER TABLE StoreDomains
	ADD CONSTRAINT FK_Stores_StoreDomains
	FOREIGN KEY(StoreId)
	REFERENCES Stores(StoreId);

ALTER TABLE StoreDesigns
	ADD CONSTRAINT FK_Stores_StoreDesign
	FOREIGN KEY(StoreId)
	REFERENCES Stores(StoreId);

ALTER TABLE ProductSubjects
	ADD CONSTRAINT FK_Subjects_ProductSubjects
	FOREIGN KEY(SubjectId)
	REFERENCES Subjects(SubjectId);

ALTER TABLE SubjectIdentifiers
	ADD CONSTRAINT FK_Subjects_SubjectIdentifiers
	FOREIGN KEY(SubjectId)
	REFERENCES Subjects(SubjectId);

ALTER TABLE URLs
	ADD CONSTRAINT FK_URLPatterns_URLs
	FOREIGN KEY(SourcePatternId)
	REFERENCES URLPatterns(PatternId);

ALTER TABLE EntityTypeURLPatterns
	ADD CONSTRAINT FK_URLPatterns_EntityTypeURLPatterns
	FOREIGN KEY(PatternId)
	REFERENCES URLPatterns(PatternId);

ALTER TABLE EntityURLs
	ADD CONSTRAINT FK_URLs_EntityURLs
	FOREIGN KEY(URLId)
	REFERENCES URLs(URLId);

ALTER TABLE URLPublishedStatus
	ADD CONSTRAINT FK_URLs_URLPublishedStatus
	FOREIGN KEY(URLId)
	REFERENCES URLs(URLId);

ALTER TABLE EntityRatings
	ADD CONSTRAINT FK_Users_EntityRatings
	FOREIGN KEY(UserId)
	REFERENCES Users(UserId);

ALTER TABLE UserCredentials
	ADD CONSTRAINT FK_User_UserCredentials
	FOREIGN KEY(UserId)
	REFERENCES Users(UserId);

ALTER TABLE UserRecordReferences
	ADD CONSTRAINT FK_Users_UserRecordReferences
	FOREIGN KEY(UserId)
	REFERENCES Users(UserId);

ALTER TABLE UserName
	ADD CONSTRAINT FK_Users_UserName
	FOREIGN KEY(UserId)
	REFERENCES Users(UserId);

CREATE INDEX CodeTableLanguageISO639_2_B_Idx_Code2
	ON CodeTableLanguageISO639_2_B(LanguageCode2)
	;

CREATE UNIQUE INDEX CodeTables_Idx_DomainName
	ON CodeTables(TableDomain, TableName)
	;

CREATE UNIQUE INDEX CodeTables_Idx_NameDomain
	ON CodeTables(TableName, TableDomain)
	;

CREATE INDEX CollectionIdentifiers_Idx_IdentifierTypeCollection
	ON CollectionIdentifiers(IDValue, IdentifierTypeId, CollectionId)
	;

CREATE INDEX CollectionIdentifiers_Idx_CollectionIdentifierType
	ON CollectionIdentifiers(CollectionId, IDValue, IdentifierTypeId)
	;

CREATE INDEX CollectionTitles_Idx_Title
	ON CollectionTitles(EffectiveTitle)
	;

CREATE INDEX Collections_Idx_NameSource
	ON Collections(Name, SourceName)
	;

CREATE INDEX Collections_Idx_TypeId
	ON Collections(CollectionType, CollectionId)
	;

CREATE INDEX Collections_Idx_SourceName
	ON Collections(SourceName, Name)
	;

CREATE INDEX Collections_Idx_Replace
	ON Collections(ReplaceWithThisId)
	;

CREATE UNIQUE INDEX ContributorIdentifiers_Idx_IdentifierTypeContributor
	ON ContributorIdentifiers(IDValue, IdentifierTypeId, ContributorId)
	;

CREATE INDEX ContributorIdentifiers_Idx_ContributorIdentifierType
	ON ContributorIdentifiers(ContributorId, IDValue, IdentifierTypeId)
	;

CREATE INDEX Contributors_Idx_Replace
	ON Contributors(ReplaceWithThisId)
	;

CREATE INDEX Contributors_Idx_PersonName
	ON Contributors(PersonName)
	;

CREATE INDEX Contributors_Idx_KeyNames
	ON Contributors(KeyNames)
	;

CREATE INDEX Contributors_Idx_NamesBeforeKey
	ON Contributors(NamesBeforeKey)
	;

CREATE INDEX DesignDocuments_Idx_NameEntityTypeId
	ON DesignDocuments(DocumentName, EntityType, EntityId)
	;

CREATE UNIQUE INDEX Designs_Idx_NameVersion
	ON Designs(DesignName, DesignVersion)
	;

CREATE INDEX Entities_Idx_Name
	ON Entities(Name)
	;

CREATE UNIQUE INDEX Entities_Idx_HashedId
	ON Entities(HashedId)
	;

CREATE INDEX EntityRatings_Idx_UserEntityEntry
	ON EntityRatings(UserId, EntityType, EntityId, RatingId)
	;

CREATE INDEX EntityRatings_Idx_StatusEntityEntry
	ON EntityRatings(CommentStatus, EntityType, EntityId, RatingId)
	;

CREATE INDEX EntityRelatedProducts_Idx_RelatedEntityRelation
	ON EntityRelatedEntities(RelatedEntityType, RelatedEntityId, EntityType, EntityId, EntityRelationCode)
	;

CREATE INDEX EntityRelatedProducts_Idx_RelatedRelationEntity
	ON EntityRelatedEntities(RelatedEntityType, RelatedEntityId, EntityRelationCode, EntityType, EntityId)
	;

CREATE INDEX EntityRelatedEntities_Idx_OriginalRelatedEntity
	ON EntityRelatedEntities(RelatedEntityType, OriginalRelatedEntityId)
	;

CREATE INDEX EntityResources_Idx_EntryId
	ON EntityResources(EntryId)
	;

CREATE INDEX EntityTexts_Idx_Entry
	ON EntityTexts(EntryId)
	;

CREATE UNIQUE INDEX EntityTypes_Idx_Name
	ON EntityTypes(Name)
	;

CREATE UNIQUE INDEX EntityTypes_Idx_SchemaName
	ON EntityTypes(TableSchema, TableName)
	;

CREATE INDEX EntityURLs_Idx_URLEntityTypeId
	ON EntityURLs(URLId, EntityType, EntityId)
	;

CREATE INDEX ExchangeRates_Idx_StoreToCToDFromD
	ON ExchangeRates(StoreId, ToCurrencyCode, ToDate, FromDate)
	;

CREATE UNIQUE INDEX IdentifierTypeName_Idx_Name
	ON IdentifierTypes(Name)
	;

CREATE INDEX IdentifierTypeName_Idx_Value
	ON IdentifierTypes(CodeTableId, Value)
	;

CREATE INDEX ImprintIdentifiers_Idx_IdentifierTypeImprint
	ON ImprintIdentifiers(IDValue, IdentifierTypeId, ImprintId)
	;

CREATE INDEX ImprintIdentifiers_Idx_ImprintIdentifierType
	ON ImprintIdentifiers(ImprintId, IDValue, IdentifierTypeId)
	;

CREATE INDEX Imprints_Idx_Name
	ON Imprints(Name)
	;

CREATE INDEX Imprints_Idx_Replace
	ON Imprints(ReplaceWithThisId)
	;

CREATE UNIQUE INDEX InterchangeTypes_Idx_Name
	ON InterchangeTypes(Name)
	;

CREATE UNIQUE INDEX MessageStatus_Idx_TypeName
	ON MessageStatus(TypeInterchange, Name)
	;

CREATE UNIQUE INDEX OriginMessages_Idx_FileNameOrigin
	ON OriginMessages(FileName, OriginId)
	;

CREATE UNIQUE INDEX OriginMessages_Idx_InterchangeStatusOriginMessage
	ON OriginMessages(TypeInterchange, MessageStatus, OriginId, IdMessage)
	;

CREATE INDEX OriginMessages_Idx_MessageDate
	ON OriginMessages(MessageDate)
	;

CREATE INDEX OriginMessages_Idx_StatusOrigin
	ON OriginMessages(MessageStatus, OriginId)
	;

CREATE UNIQUE INDEX Origins_Idx_Name
	ON Origins(Name)
	;

CREATE INDEX Origins_Idx_TypeOrigin
	ON Origins(InterchangeType)
	;

CREATE UNIQUE INDEX PageURLs_Idx_URL
	ON PageURLs(URL)
	;

CREATE UNIQUE INDEX Pages_Idx_Name
	ON Pages(Name)
	;

CREATE INDEX ProductAudiences_Idx_AudienceProduct
	ON ProductAudiences(AudienceCode, ProductId)
	;

CREATE UNIQUE INDEX ProductCollections_Idx_CollectionProduct
	ON ProductCollections(CollectionId, ProductId)
	;

CREATE INDEX ProductCollections_Idx_OriginalCollection
	ON ProductCollections(OriginalCollectionId)
	;

CREATE UNIQUE INDEX ProductContentContributors_Idx_ContributorProductRole
	ON ProductContentContributors(ContributorId, ProductId, EntryOrder, ContributorRole)
	;

CREATE UNIQUE INDEX ProductContentContributors_Idx_RoleContributorProduct
	ON ProductContentContributors(ContributorRole, ContributorId, ProductId, EntryOrder)
	;

CREATE INDEX ProductContentContributors_Idx_OriginalContributor
	ON ProductContentContributors(OriginalContributorId)
	;

CREATE INDEX ProductContentTitles_Idx_Title
	ON ProductContentTitles(EffectiveTitle)
	;

CREATE UNIQUE INDEX ProductContributors_Idx_ContributorProductRole
	ON ProductContributors(ContributorId, ProductId, ContributorRole)
	;

CREATE UNIQUE INDEX ProductContributors_Idx_RoleContributorProduct
	ON ProductContributors(ContributorRole, ContributorId, ProductId)
	;

CREATE INDEX ProductContributors_Idx_OriginalContributor
	ON ProductContributors(OriginalContributorId)
	;

CREATE UNIQUE INDEX ProductIdentifiers_Idx_ProductIdentifierType
	ON ProductIdentifiers(ProductId, IDValue, IdentifierTypeId)
	;

CREATE UNIQUE INDEX ProductIdentifiers_Idx_IdentifierTypeProduct
	ON ProductIdentifiers(IDValue, IdentifierTypeId, ProductId)
	;

CREATE UNIQUE INDEX ProductImprints_Idx_ImprintProduct
	ON ProductImprints(ImprintId, ProductId)
	;

CREATE INDEX ProductImprints_Idx_OriginalImprint
	ON ProductImprints(OriginalImprintId)
	;

CREATE UNIQUE INDEX ProductOriginMessages_Idx_OriginMessageProduct
	ON ProductOriginMessages(OriginId, MessageId, ProductId)
	;

CREATE UNIQUE INDEX ProductPublishers_Idx_PublisherProductRole
	ON ProductPublishers(PublisherId, ProductId, PublishingRole)
	;

CREATE UNIQUE INDEX ProductPublishers_Idx_PublisherRoleProduct
	ON ProductPublishers(PublisherId, PublishingRole, ProductId)
	;

CREATE INDEX ProductPublishers_Idx_OriginalPublisher
	ON ProductPublishers(OriginalPublisherId)
	;

CREATE UNIQUE INDEX ProductRecordReferences_Idx_ProductOrigin
	ON ProductRecordReferences(ProductId, OriginId)
	;

CREATE INDEX ProductRecordReferences_Idx_ReferenceOrigin
	ON ProductRecordReferences(RecordReference, OriginId)
	;

CREATE UNIQUE INDEX ProductRelatedWorks_Idx_RelatedProductRelation
	ON ProductRelatedWorks(RelatedProductId, ProductId, WorkRelationCode)
	;

CREATE UNIQUE INDEX ProductRelatedWorks_Idx_RelatedRelationProduct
	ON ProductRelatedWorks(RelatedProductId, WorkRelationCode, ProductId)
	;

CREATE INDEX ProductRelatedWorks_Idx_OriginalRelatedProduct
	ON ProductRelatedWorks(OriginalRelatedProductId)
	;

CREATE UNIQUE INDEX ProductSubjects_Idx_SubjectProduct
	ON ProductSubjects(SubjectId, ProductId)
	;

CREATE INDEX ProductSubjects_Idx_OriginalSubject
	ON ProductSubjects(OriginalSubjectId)
	;

CREATE UNIQUE INDEX ProductSupplyDetail_Idx_OriginProduct
	ON ProductSupplyDetail(OriginId, ProductId)
	;

CREATE INDEX ProductTitles_Idx_Title
	ON ProductTitles(EffectiveTitle)
	;

CREATE INDEX Products_Idx_Replace
	ON Products(ReplaceWithThisId)
	;

CREATE INDEX PublisherIdentifiers_Idx_IdentifierTypePublisher
	ON PublisherIdentifiers(IDValue, IdentifierTypeId, PublisherId)
	;

CREATE INDEX PublisherIdentifiers_Idx_PublisherIdentifierType
	ON PublisherIdentifiers(PublisherId, IDValue, IdentifierTypeId)
	;

CREATE INDEX Publishers_Idx_Name
	ON Publishers(Name)
	;

CREATE INDEX Publishers_Idx_Replace
	ON Publishers(ReplaceWithThisId)
	;

CREATE UNIQUE INDEX StoreDesignRepositories_Idx_Bucket
	ON StoreDesignRepositories(AWSBucket)
	;

CREATE INDEX StoreDesigns_Idx_DesignStore
	ON StoreDesigns(DesignId, StoreId)
	;

CREATE UNIQUE INDEX Stores_Idx_Name
	ON Stores(Name)
	;

CREATE INDEX SubjectIdentifiers_Idx_IdentifierTypeSubject
	ON SubjectIdentifiers(IDValue, IdentifierTypeId, SubjectId)
	;

CREATE INDEX SubjectIdentifiers_Idx_SubjectIdentifierType
	ON SubjectIdentifiers(SubjectId, IDValue, IdentifierTypeId)
	;

CREATE INDEX Subjects_Idx_Replace
	ON Subjects(ReplaceWithThisId)
	;

CREATE INDEX Subjects_Idx_Title
	ON Subjects(Title)
	;

CREATE UNIQUE INDEX URLPatterns_Idx_Name
	ON URLPatterns(Name)
	;

CREATE INDEX URLPatterns_Idx_PatternTypeId
	ON URLPatterns(PatternType, PatternId)
	;

CREATE INDEX URLPublishedStatus_Idx_StoreDesignURL
	ON URLPublishedStatus(StoreId, DesignId, URLId)
	;

CREATE INDEX URLPublishedStatus_Idx_StatusURL
	ON URLPublishedStatus(PublishedStatus, URLId)
	;

CREATE INDEX URLPublishedStatus_Idx_StatusStoreDesignURL
	ON URLPublishedStatus(PublishedStatus, StoreId, DesignId, URLId)
	;

CREATE UNIQUE INDEX URLs_Idx_LinkBase
	ON URLs(LinkBase)
	;

CREATE INDEX URLs_Idx_PatternURL
	ON URLs(SourcePatternId, URLId)
	;

CREATE UNIQUE INDEX UserCredentials_Idx_LoginType
	ON UserCredentials(CredentialLoginName, CredentialType)
	;

CREATE INDEX UserName_Idx_FirstName
	ON UserName(FirstNames)
	;

CREATE INDEX UserName_Idx_LastName
	ON UserName(LastNames)
	;

CREATE INDEX UserRecordReferences_Idx_ReferenceOrigin
	ON UserRecordReferences(UserReference, OriginId)
	;

CREATE UNIQUE INDEX UserRecordReferences_Idx_UserOrigin
	ON UserRecordReferences(UserId, OriginId)
	;

CREATE UNIQUE INDEX Users_Idx_HashedId
	ON Users(HashedId)
	;

CREATE INDEX Users_Idx_Replace
	ON Users(ReplaceWithThisId)
	;

